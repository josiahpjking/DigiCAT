treatment_variable = "t", matching_variable = c("a", "b"))
estimation_stage <- function(.data, missing_method, model_type,
treatment_variable, matching_variable,
weighting_variable = NULL, cluster_variable = NULL,
strata_variable = NULL,
...){
design_object <- create_design(.data, weighting_variable, cluster_variable, strata_variable,...)
handled_missingness <- handle_missingness(.data, missing_method,design_object,...)
propensity_model <- estimate_model(handled_missingness, model_type, treatment_variable, matching_variable,
missing_method,...)
prop_scores <- get_propensity(estimated_propensity_model = propensity_model, model_type,
treatment_variable, matching_variable,
handled_missingness, missing_method, .data,...)
return(list(missingness_treated_dataset = handled_missingness,
propensity_scores = prop_scores,
estimated_propensity_model = propensity_model,
propensity_model_class = model_type, # nb: want to alter to class(propensity_model) or use indicator
survey_design_object = propensity_model$survey.design)) # note if weighting, this is the object containing data, not missingness_treated_dataset
}
abc <- estimation_stage(.data = df2$amp, missing_method = "complete", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
View(abc)
abc <- estimation_stage(.data = df2$amp, missing_method = "mi", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
getwd()
getwd()
setwd("C:/Users/hwright2/Documents/DigiCAT")
source("R/propensity_estimation_stage.R")
N =500
A = matrix(runif(5^2)*2-1, ncol = 5)
Xmat = MASS::mvrnorm(N, mu=rnorm(5,0,3), Sigma = t(A)%*%A)
lp = apply(Xmat, 2, scale)%*%rnorm(5,0,2)
t = rbinom(N,1,plogis(lp))
y = base::cbind(Xmat,t) %*% c(rnorm(5,0,1),2) + rnorm(N,0,1)
df <- as.data.frame(base::cbind(Xmat, t, y))
names(df) <- c(letters[1:5], "t", "y")
df2 = mice::ampute(df,
prop = 0.05)
abc <- estimation_stage(.data = df2$amp, missing_method = "mi", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
View(abc)
source("R/propensity_estimation_stage.R")
N =500
A = matrix(runif(5^2)*2-1, ncol = 5)
Xmat = MASS::mvrnorm(N, mu=rnorm(5,0,3), Sigma = t(A)%*%A)
lp = apply(Xmat, 2, scale)%*%rnorm(5,0,2)
t = rbinom(N,1,plogis(lp))
y = base::cbind(Xmat,t) %*% c(rnorm(5,0,1),2) + rnorm(N,0,1)
df <- as.data.frame(base::cbind(Xmat, t, y))
names(df) <- c(letters[1:5], "t", "y")
df2 = mice::ampute(df,
prop = 0.05)
abc <- estimation_stage(.data = df2$amp, missing_method = "mi", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
create_design <- function(.data, weighting_variable = NULL,
cluster_variable = NULL, strata_variable = NULL,
...){
if (!is.null(weighting_variable) & is.null(cluster_variable) & is.null(strata_variable)) { # currently as sampling & NR have same workflow, is not controlled by NR = TRUE
data_complete = subset(.data, !is.na(.data[[weighting_variable]])) # only weighting
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
data = data_complete,
...) #
} else if(!is.null(cluster_variable) & !is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[cluster_variable]]))) # weighting and ids
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]]))) # weighting and strata
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & !is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # all 3
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
} else if(!is.null(cluster_variable) & is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, !is.na(.data[[cluster_variable]])) # ids only
design_object = svydesign(ids = data_complete[[cluster_variable]],
data = data_complete,
...)
}else if(!is.null(strata_variable) & is.null(weighting_variable) & is.null(cluster_variable)){
data_complete = subset(.data, !is.na(.data[[strata_variable]])) # strata only
design_object = svydesign(ids = ~1,
strata = data_complete[[strata_variable]],
data = data_complete,
...)
}
else if(!is.null(strata_variable) & is.null(weighting_variable) & !is.null(cluster_variable)){
data_complete = subset(.data, (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # strata only
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
}
}
abc <- estimation_stage(.data = df2$amp, missing_method = "mi", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
handle_missingness <- function(.data, missing_method = NULL,
design_object = NULL,
counterfactual_method = NULL,
...){
switch(missing_method,
complete = {
handled_missingness = na.omit(.data)
},
mi = {
# if(counterfactual_method == "psm"){
handled_missingness = mice(.data, m = 5, maxit = 20,
method = "rf") # default options
# allow user to alter m & maxit according to FMI & convergence
# will not be congenial unless include interactions of substantive outcome model
# cannot reliably obtain congeniality -> default is random forest imputation
# add condition - if weighting, using MI-bootstrap approach?
# switch to ML/RF method to remove need to consider functional form of imp model
},
# else if(counterfactual_method == "iptw"){
#   handled_missingness = mice(.data, m = 5, maxit = 20,
#                              method = "norm.boot") # default options
#  }
# },
weighting = {
handled_missingness = design_object # currently treats non-response and sampling the same
},
parallel_mi = {
# Using all cores can slow down the computer
# significantly, I therefore try to leave one
# core alone in order to be able to do something
# else during the time the code runs
cores_2_use <- detectCores() - 1
handled_missingness = futuremice(.data, m = 5, maxit = 20, # maybe add parallel seed etc
method = "rf", n.core = cores_2_use)
# if n cores exceeds m, cores used will be set to equal m
},
stop("How should i deal with missingness? Should be one of 'mi', 'complete', 'weighting', 'parallel_mi'")
)
return(handled_missingness)
}
abc <- estimation_stage(.data = df2$amp, missing_method = "mi", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
} else {
f = as.formula(paste0("as.factor(", treatment_variable,") ~",paste0(matching_variable, collapse="+")))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), #
function(x) gbm(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model = gbm(as.formula(f), data = handled_missingness,...) #
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest::randomForest(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest::randomForest(as.formula(f), data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
# estimated_propensity_model = lapply(complete(handled_missingness, "all"),
#                                    function(x) MASS::polr(f, data = x, Hess =T,...))
comp <- mice::complete(handled_missingness, "long", include = TRUE)
comp[[treatment_variable]] <- as.factor(comp[[treatment_variable]])
handled_missingness <- as.mids(comp)
comp <- mice::complete(handled_missingness, "all", include = FALSE)
estimated_propensity_model <- data.frame()
for (i in 1:length(comp)){
polly <- MASS::polr(f, data = comp[[i]],
Hess=T)
res <- as.data.frame(cbind(comp[[i]],
polly$model,
polly$lp))
res$impset <- i
estimated_propensity_model <- rbind(estimated_propensity_model,res)
}
}else if(missing_method == "complete"){
handled_missingness[[treatment_variable]] <- as.factor(handled_missingness[[treatment_variable]])
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
} else if(missing_method == "weighting"){
handled_missingness[[7]][[treatment_variable]] <- as.factor(handled_missingness[[7]][[treatment_variable]])
estimated_propensity_model = svyolr(f, design=handled_missingness)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
abc <- estimation_stage(.data = df2$amp, missing_method = "mi", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
calculate_ordered_logistic_linear_predictor <- function(formula, data,
design_object) {
# Fit ordered logistic regression model
model <- svyolr(formula, design = design_object)
# Extract coefficients
coefficients <- coef(model)
# Initialise linear predictor
propensity_score <- 0  # Zero for the intercept
# Extract predictor variables from df
predictors <- all.vars(formula)[-1]  # Exclude the outcome variable
# Calculate linear predictor
for (predictor in predictors) {
propensity_score <- propensity_score + coefficients[predictor] * data[[predictor]]
}
return(propensity_score)
}
get_propensity <- function(estimated_propensity_model, model_type, treatment_variable, matching_variable,
handled_missingness, missing_method,.data,...){
if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
} else {
f = as.formula(paste0("as.factor(", treatment_variable,") ~",paste0(matching_variable, collapse="+")))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(glm(f, data = x, family=binomial(link="probit"), ...),
type = "response"))
} else { # for CC and weighting approaches alike
propensity_score = estimated_propensity_model$fitted.values
}
},
gbm = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(gbm(as.formula(f), data = x, ...),
type = "response"))
} else {
propensity_score = predict(estimated_propensity_model)
}
},
rf = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(randomForest(as.formula(f), data = x, ...),
type = "response"))
} else{
propensity_score = predict(estimated_propensity_model, type = "response")
}
},
poly = {
if(missing_method == "mi" & model_type == "poly"){
propensity_score <- estimated_propensity_model
} else if (missing_method == "complete" & model_type == "poly"){
propensity_score = as.data.frame(cbind(handled_missingness,
#estimated_propensity_model$model, don't think this is needed
estimated_propensity_model$lp))
names(propensity_score)[names(propensity_score) == "polly$lp"] <- "lp"
} else if(missing_method == "weighting" & model_type == "poly"){
propensity_score <- calculate_ordered_logistic_linear_predictor(formula = f,
data = handled_missingness$variables,
design_object = handled_missingness)
propensity_score <- cbind(handled_missingness$variables, propensity_score)
}
},
stop("I need a valid model! (glm, gbm, rf, poly)")
)
return(propensity_score)
}
abc <- estimation_stage(.data = df2$amp, missing_method = "mi", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
View(abc)
source("R/balance_data.R")
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "mi")
View(ghi)
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "pwm",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "mi")
source("R/outcome_analysis_stage.R")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "mi")
extract_balanced_data <- function(balanced_data, psmodel_obj, missing_method = NULL,
weighting_variable, counterfactual_method, treatment_variable,...){
if( "mimids" %in% class(balanced_data)) {
extracted_balanced_data = MatchThem::complete(balanced_data, "all", all = FALSE)
return(list(extracted_balanced_data, process = "mi_psm"))
} else if ( "wimids" %in% class(balanced_data)){
extracted_balanced_data = MatchThem::complete(balanced_data, "all", all = FALSE)
return(list(extracted_balanced_data, process = "mi_iptw"))
} else if ( "matchit" %in% class(balanced_data) & missing_method == "complete"){
extracted_balanced_data = match.data(balanced_data)
return(list(extracted_balanced_data, process = "cc_psm"))
## to do: change below design obj - ids = subclass, strata as is first entered?
} else if(missing_method =="weighting" & "matchit" %in% class(balanced_data)){
extracted_balanced_data = match.data(balanced_data)
extracted_balanced_design = svydesign(ids=~subclass, weights = (extracted_balanced_data[[weighting_variable]]*extracted_balanced_data$weights),
data = extracted_balanced_data)
extracted_balanced_data = extracted_balanced_design
return(list(extracted_balanced_data, process = "weighting_psm"))
} else if ( "weightit" %in% class(balanced_data) & missing_method == "complete"){
psmodel_obj$missingness_treated_dataset = cbind(psmodel_obj$missingness_treated_dataset,balanced_data$weights)
colnames(psmodel_obj$missingness_treated_dataset)[colnames(psmodel_obj$missingness_treated_dataset) == "balanced_data$weights"] <- "weights"
return(list(psmodel_obj$missingness_treated_dataset, process = "cc_iptw"))
## to do: change below design obj - ids = subclass, strata as is first entered?
} else if(missing_method=="weighting" & "weightit" %in% class(balanced_data)){
survey_data = psmodel_obj$survey_design_object$variables
survey_data = cbind(survey_data,balanced_data$weights)
colnames(survey_data)[colnames(survey_data) == "balanced_data$weights"] <- "weights"
extracted_balanced_data = svydesign(ids=~1, weights = (survey_data[[weighting_variable]]*survey_data$weights),
data = survey_data)
extracted_balanced_data = extracted_balanced_data
return(list(extracted_balanced_data, process = "weighting_iptw"))
} else if(counterfactual_method == "nbp" & missing_method == "complete"){
extracted_balanced_data = balanced_data
# replace treatment variable with dose
return(list(extracted_balanced_data, process = "cc_nbp"))
}
else if(counterfactual_method == "nbp" & missing_method == "weighting"){
extracted_balanced_data = balanced_data
# replace treatment variable with dose
return(list(extracted_balanced_data, process = "weighting_nbp"))
}
}
fit_outcome_model <- function(balanced_data,extracted_balanced_data,
outcome_variable, treatment_variable, matching_variable,
covariates = NULL, doubly = TRUE, psmodel_obj,
...){
if(doubly){
if(!is.null(covariates)){
model_formula = as.formula(paste0(outcome_variable,"~",treatment_variable,"*(",paste0(matching_variable, covariates, collapse="+"), ")"))
} else{
model_formula = as.formula(paste0(outcome_variable,"~",treatment_variable,"*(",paste0(matching_variable, collapse="+"), ")"))
}
} else {
if(!is.null(covars)){
model_formula = as.formula(paste0(outcome_variable,"~",treatment_variable,"*(",paste0(covariates, collapse="+"), ")"))
} else{
model_formula = as.formula(paste0(outcome_variable,"~",treatment_variable))
}
}
if(extracted_balanced_data$process == "mi_psm"){
lm_model_fit <- lapply(complete(balanced_data, "all"), function(d) {
lm(model_formula, data = d,
weights = weights)
})
model_fit <- lapply(lm_model_fit, function(fit) {
marginaleffects::avg_comparisons(fit, newdata = subset(fit$data, treatment_variable == 1),
variables = treatment_variable, wts = "weights", vcov = ~subclass)
})
model_fit <- mice::pool(model_fit)
} else if(extracted_balanced_data$process == "cc_psm"){
lm_model_fit = lm(model_formula, data = extracted_balanced_data[[1]], weights = weights)
model_fit = marginaleffects::avg_comparisons(lm_model_fit, variables = treatment_variable,
vcov = ~subclass,
newdata = subset(extracted_balanced_data[[1]],
extracted_balanced_data[[1]][[treatment_variable]] == 1),
wts = "weights")
} else if (extracted_balanced_data$process == "mi_iptw"){
lm_model_fit <- lapply(complete(balanced_data, "all"), function(d) {
lm(model_formula, data = d,
weights = weights)
})
model_fit <- lapply(lm_model_fit, function(fit) {
marginaleffects::avg_comparisons(fit, newdata = subset(fit$data, treatment_variable == 1),
variables = treatment_variable, wts = "weights", vcov = "HC3")
})
model_fit <- mice::pool(model_fit)
}
else if (extracted_balanced_data$process == "cc_iptw"){
model_fit = lm(model_formula, data = extracted_balanced_data[[1]], weights = weights)
model_fit = marginaleffects::avg_comparisons(model_fit, variables = treatment_variable,
vcov = "HC3",
newdata = subset(extracted_balanced_data[[1]],
extracted_balanced_data[[1]][[treatment_variable]] == 1),
wts = "weights")
} else if (extracted_balanced_data$process == "weighting_iptw"){
model_fit = svyglm(model_formula, design = extracted_balanced_data[[1]])
model_fit = marginaleffects::avg_comparisons(model_fit, variables = treatment_variable)
} else if (extracted_balanced_data$process == "weighting_psm"){
model_fit = svyglm(model_formula, design = extracted_balanced_data[[1]])
model_fit = marginaleffects::avg_comparisons(model_fit, variables = treatment_variable)
}
else if (extracted_balanced_data$process == "cc_nbp"){
model_fit = lm(model_formula, data = extracted_balanced_data[[1]])
}
else if(extracted_balanced_data$process == "weighting_nbp"){
design_object2 = svydesign(ids = psmodel_obj$survey_design_object$cluster, # create design obj/update design obj with dose paired data
weights = psmodel_obj$survey_design_object$weights,
strata = psmodel_obj$survey_design_object$strata,
data = extracted_balanced_data[[1]])
model_fit = svyglm(model_formula, design = design_object2)
}
return(model_fit)
}
extract_outcome_results <- function(fitted_model, missing_method,...){
if("comparisons" %in% class(fitted_model) & missing_method == "weighting"){
extracted_outcome_results = summary(fitted_model, conf.int = TRUE)
return(list(extracted_outcome_results, process = "weighting"))
}else if("comparisons" %in% class(fitted_model) & missing_method == "complete"){
extracted_outcome_results = summary(fitted_model, conf.int = TRUE)
return(list(extracted_outcome_results, process = "cc"))
}
else if("mipo" %in% class(fitted_model) & missing_method == "mi"){
extracted_outcome_results = summary(fitted_model, conf.int = TRUE)
return(list(extracted_outcome_results, process = "mi"))
}else if("lm" %in% class(fitted_model) & missing_method == "complete"){
extracted_outcome_results = summary(fitted_model)
return(list(extracted_outcome_results, process = "cc"))
}else if("svyglm" %in% class(fitted_model) & missing_method == "weighting"){
extracted_outcome_results = summary(fitted_model)
return(list(extracted_outcome_results, process = "weighting"))
}
}
standardise_outcome_format <- function(extracted_outcome_results, counterfactual_method, fitted_model,...){
if(extracted_outcome_results$process == "mi"){
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe <- results_dataframe[,-c(2,5,6,10)]
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
} else if(extracted_outcome_results$process == "cc" & counterfactual_method != "nbp"){
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe <- results_dataframe[,-c(2,5,7,10)]
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
} else if(extracted_outcome_results$process == "weighting" & counterfactual_method == "psm"){
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe <- results_dataframe[,-c(2,5,7,10)]
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
}
else if(extracted_outcome_results$process == "weighting" & counterfactual_method == "iptw"){
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe <- results_dataframe[,-c(2,5,7,10)]
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
}
else if(extracted_outcome_results$process == "cc" & counterfactual_method == "nbp"){
results_dataframe = as.data.frame(extracted_outcome_results[[1]][[4]])
colnames(results_dataframe) <- c("Coefficient Estimate", "Standard Error", "T statistic", "P-value")
results_dataframe <- results_dataframe[c(1,2),]
return(results_dataframe)
}
else if(extracted_outcome_results$process == "weighting" & counterfactual_method == "nbp"){
results_dataframe = as.data.frame(extracted_outcome_results[[1]][[13]])
CIs <- confint(fitted_model)
results_dataframe <- cbind(results_dataframe, CIs)
colnames(results_dataframe) <- c("Coefficient Estimate", "Standard Error", "T statistic", "P-value", "Lower CI (2.5%)",
"Upper CI (97.5%)")
results_dataframe <- results_dataframe[c(1,2),]
return(results_dataframe)
}
}
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "mi")
View(mno)
View(mno)
