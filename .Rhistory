library(marginaleffects)
?avg_comparisons
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "iptw",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "mi")
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "mi")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "iptw",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "mi")
mno
ex <- extract_balanced_data(ghi, abc, missing_method = "mi", counterfactual_method = "psm")
fit <- fit_outcome_model(ghi, ex, outcome_variable = "y", treatment_variable = "t", matching_variable = c("a", "b"))
fit
summary(fit)
summary(fit, conf.int = T)
abc <- estimation_stage(.data = df2$amp, missing_method = "complete", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
evaluate_propensity_stage(abc, evaluation_method = "support")
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "complete")
library(MatchIt)
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "complete")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "complete")
mno
ex <- extract_balanced_data(ghi, abc, missing_method = "complete", counterfactual_method = "psm")
fit <- fit_outcome_model(ghi, ex, outcome_variable = "y", treatment_variable = "t", matching_variable = c("a", "b"))
fit
summary(fit)
summary(fit, conf.int = TRUE)
extracted_outcome_results = summary(fitted_model, conf.int = TRUE)
extracted_outcome_results = summary(fit, conf.int = TRUE)
extracted_outcome_results
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe
results_dataframe <- results_dataframe[,-c(2,5,7)]
results_dataframe
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
results_dataframe
ghi <- balance_data(counterfactual_method = "iptw", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "complete")
library(weightit)
library(WeightIt)
ghi <- balance_data(counterfactual_method = "iptw", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "complete")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "iptw",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "complete")
mno
source("R/outcome_analysis_stage.R")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "iptw",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "complete")
mno
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "complete")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "complete")
mno
results_dataframe
source("R/propensity_estimation_stage.R")
source("R/balance_data.R")
source("R/outcome_analysis_stage.R")
N =500
A = matrix(runif(5^2)*2-1, ncol = 5)
Xmat = MASS::mvrnorm(N, mu=rnorm(5,0,3), Sigma = t(A)%*%A)
lp = apply(Xmat, 2, scale)%*%rnorm(5,0,2)
t = rbinom(N,1,plogis(lp))
y = base::cbind(Xmat,t) %*% c(rnorm(5,0,1),2) + rnorm(N,0,1)
df <- as.data.frame(base::cbind(Xmat, t, y))
names(df) <- c(letters[1:5], "t", "y")
df2 = mice::ampute(df,
prop = 0.05)
abc <- estimation_stage(.data = df2$amp, missing_method = "complete", model_type = "glm",
treatment_variable = "t", matching_variable = c("a", "b"))
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "complete")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "complete")
mno
ex <- extract_balanced_data(ghi, abc, missing_method = "complete", counterfactual_method = "psm")
fit <- fit_outcome_model(ghi, ex, outcome_variable = "y", treatment_variable = "t", matching_variable = c("a", "b"))
fit
ex <- extract_outcome_results(fit, missing_method = "complete")
ex
standardise_outcome_format <- function(extracted_outcome_results, counterfactual_method){
if(extracted_outcome_results$process == "mi"){
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe <- results_dataframe[,-c(2,5,6,10)]
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
} else if(extracted_outcome_results$process == "cc" & counterfactual_method != "nbp"){
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe <- results_dataframe[,-c(2,5,7)]
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
} else if(extracted_outcome_results$process == "weighting" & counterfactual_method == "psm"){
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe <- results_dataframe[,-c(2,5,9)]
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
}
else if(extracted_outcome_results$process == "weighting" & counterfactual_method == "iptw"){
results_dataframe = as.data.frame(extracted_outcome_results[[1]][[13]])
colnames(results_dataframe) <- c("Coefficient Estimate", "Standard Error", "T statistic", "P-value")
return(results_dataframe)
}
else if(extracted_outcome_results$process == "cc" & counterfactual_method == "nbp"){
results_dataframe = as.data.frame(extracted_outcome_results[[1]][[4]])
colnames(results_dataframe) <- c("Coefficient Estimate", "Standard Error", "T statistic", "P-value")
results_dataframe <- results_dataframe[c(1,2),]
return(results_dataframe)
}
}
st <- standardise_outcome_format(ex, "psm")
st
results_dataframe = as.data.frame(ex)
results_dataframe
results_dataframe <- results_dataframe[,-c(2,5,7)]
results_dataframe
results_dataframe = as.data.frame(extracted_outcome_results)
results_dataframe = as.data.frame(ex)
results_dataframe <- results_dataframe[,-c(2,5,7,10)]
results_dataframe
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
results_dataframe
source("R/outcome_analysis_stage.R")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "complete")
mno
ghi <- balance_data(counterfactual_method = "iptw", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "complete")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "iptw",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "complete")
mno
gen_Y_C <- function(A, X) {
2*A + 2*X[,1] + 2*X[,2] + 2*X[,3] + 1*X[,4] + 2*X[,5] + 1*X[,6] + rnorm(length(A), 0, 5)
}
gen_SW <- function(X) {
e <- rbinom(nrow(X), 1, .3)
1/plogis(log(1.4)*X[,2] + log(.7)*X[,4] + log(.9)*X[,6] + log(1.5)*X[,8] + log(.9)*e +
-log(.5)*e*X[,2] + log(.6)*e*X[,4])
}
n <- 2000
X <- gen_X(n)
gen_X <- function(n) {
X <- matrix(rnorm(9 * n), nrow = n, ncol = 9)
X[,5] <- as.numeric(X[,5] < .5)
X
}
#~20% treated
gen_A <- function(X) {
LP_A <- - 1.2 + log(2)*X[,1] - log(1.5)*X[,2] + log(2)*X[,4] - log(2.4)*X[,5] +
log(2)*X[,7] - log(1.5)*X[,8]
P_A <- plogis(LP_A)
rbinom(nrow(X), 1, P_A)
}
# Continuous outcome
gen_Y_C <- function(A, X) {
2*A + 2*X[,1] + 2*X[,2] + 2*X[,3] + 1*X[,4] + 2*X[,5] + 1*X[,6] + rnorm(length(A), 0, 5)
}
gen_SW <- function(X) {
e <- rbinom(nrow(X), 1, .3)
1/plogis(log(1.4)*X[,2] + log(.7)*X[,4] + log(.9)*X[,6] + log(1.5)*X[,8] + log(.9)*e +
-log(.5)*e*X[,2] + log(.6)*e*X[,4])
}
n <- 2000
X <- gen_X(n)
A <- gen_A(X)
SW <- gen_SW(X)
Y_C <- gen_Y_C(A, X)
d <- data.frame(A, X, Y_C, SW)
rm(SW)
rm(A)
rm(Y_C)
rm(X)
rm(n)
df2 = mice::ampute(d,
prop = 0.15)
data_to_use <- df2$amp
#mi
abc <- estimation_stage(.data = data_to_use, missing_method = "weighting", model_type = "glm",
treatment_variable = "A", matching_variable = c("X1", "X2"),
weighting_variable = "SW")
library(survey)
#cc
abc <- estimation_stage(.data = data_to_use, missing_method = "complete", model_type = "glm",
treatment_variable = "A", matching_variable = c("X1", "X2"))
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "A",
matching_variable = c("X1", "X2"), PS_estimation_object = abc,
missing_method = "complete")
ex <- extract_balanced_data(ghi, abc, missing_method = "complete", counterfactual_method = "psm")
ex <- extract_balanced_data(ghi, abc, missing_method = "weighting", counterfactual_method = "psm")
ex <- extract_balanced_data(ghi, abc, missing_method = "weighting", counterfactual_method = "psm", weighting_variable = "SW")
fit <- fit_outcome_model(ghi, ex, outcome_variable = "y", treatment_variable = "t", matching_variable = c("a", "b"))
fit <- fit_outcome_model(ghi, ex, outcome_variable = "Y_C", treatment_variable = "A", matching_variable = c("X1", "X2"))
fit
rm(fit)
fit <- fit_outcome_model(ghi, ex, outcome_variable = "Y_C", treatment_variable = "A", matching_variable = c("X1", "X2"))
fit
ex <- extract_outcome_results(fit, missing_method = "weighting")
ex
results_dataframe = as.data.frame(ex)
results_dataframe
results_dataframe <- results_dataframe[,-c(2,5,7,10)]
results_dataframe
colnames(results_dataframe) <- c("Term","Coefficient Estimate", "Standard Error", "P-value", "Lower CI (2.5%)", "Upper CI (97.5%)")
rownames(results_dataframe) <- results_dataframe[,1]
results_dataframe <- results_dataframe[,-1]
results_dataframe
source("R/outcome_analysis_stage.R")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm",
outcome_variable = "Y_C",
treatment_variable = "A",
matching_variable = c("X1", "X2"),
psmodel_obj = abc,
missing_method = "complete")
mno
#mi
abc <- estimation_stage(.data = data_to_use, missing_method = "weighting", model_type = "glm",
treatment_variable = "A", matching_variable = c("X1", "X2"),
weighting_variable = "SW")
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "A",
matching_variable = c("X1", "X2"), PS_estimation_object = abc,
missing_method = "weighting")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm", # outcome format needs changing for weighting approach
outcome_variable = "Y_C",
treatment_variable = "A",
matching_variable = c("X1", "X2"),
psmodel_obj = abc,
missing_method = "weighting",
weighting_variable = "SW")
mno
#cc
abc <- estimation_stage(.data = data_to_use, missing_method = "weighting", model_type = "glm",
treatment_variable = "A", matching_variable = c("X1", "X2"))
gen_X <- function(n) {
X <- matrix(rnorm(9 * n), nrow = n, ncol = 9)
X[,5] <- as.numeric(X[,5] < .5)
X
}
#~20% treated
gen_A <- function(X) {
LP_A <- - 1.2 + log(2)*X[,1] - log(1.5)*X[,2] + log(2)*X[,4] - log(2.4)*X[,5] +
log(2)*X[,7] - log(1.5)*X[,8]
P_A <- plogis(LP_A)
rbinom(nrow(X), 1, P_A)
}
# Continuous outcome
gen_Y_C <- function(A, X) {
2*A + 2*X[,1] + 2*X[,2] + 2*X[,3] + 1*X[,4] + 2*X[,5] + 1*X[,6] + rnorm(length(A), 0, 5)
}
gen_SW <- function(X) {
e <- rbinom(nrow(X), 1, .3)
1/plogis(log(1.4)*X[,2] + log(.7)*X[,4] + log(.9)*X[,6] + log(1.5)*X[,8] + log(.9)*e +
-log(.5)*e*X[,2] + log(.6)*e*X[,4])
}
n <- 2000
X <- gen_X(n)
A <- gen_A(X)
SW <- gen_SW(X)
Y_C <- gen_Y_C(A, X)
d <- data.frame(A, X, Y_C, SW)
rm(SW)
rm(A)
rm(Y_C)
rm(X)
rm(n)
df2 = mice::ampute(d,
prop = 0.15)
data_to_use <- df2$amp
#mi
abc <- estimation_stage(.data = data_to_use, missing_method = "weighting", model_type = "glm",
treatment_variable = "A", matching_variable = c("X1", "X2"),
weighting_variable = "SW")
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "A",
matching_variable = c("X1", "X2"), PS_estimation_object = abc,
missing_method = "weighting")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm", # outcome format needs changing for weighting approach
outcome_variable = "Y_C",
treatment_variable = "A",
matching_variable = c("X1", "X2"),
psmodel_obj = abc,
missing_method = "weighting",
weighting_variable = "SW")
mno
data(nhanes)
# nb: model/variable choice makes no sense due to variable types
# but used as an example to add cluster/strata/weights etc
abc <- estimation_stage(.data = nhanes, missing_method = "weighting", model_type = "glm",
treatment_variable = "HI_CHOL", matching_variable = "race",
weighting_variable = "WTMEC2YR", cluster_variable = "SDMVPSU",
strata_variable = "SDMVSTRA")
ghi <- balance_data(counterfactual_method = "psm", treatment_variable = "HI_CHOL",
matching_variable = c("race"), PS_estimation_object = abc,
missing_method = "weighting")
## TO DO - edit design object in extract_balanced_data
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "psm",
outcome_variable = "RIAGENDR",
treatment_variable = "HI_CHOL",
matching_variable = "race",
psmodel_obj = abc,
missing_method = "weighting",
weighting_variable = "WTMEC2YR")
mno
#### NBP testing ####
# random data - ignore
data(mtcars)
abc <- estimation_stage(.data = mtcars, missing_method = "complete", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
prepare_dataset_nbp <- function(propensity_scores, treatment_variable, missing_method,...){
if(missing_method == "complete"){
propensity_scores[[treatment_variable]] = as.numeric(as.character(propensity_scores[[treatment_variable]]))
propensity_scores$ID <- seq_along(propensity_scores[,1])
}
else if(missing_method == "mi"){
#propensity_scores <- lapply(propensity_scores, function(x) {x[, treatment_variable] <- as.numeric(as.character(x[, treatment_variable])) ; x})
propensity_scores[[treatment_variable]] = as.numeric(as.character(propensity_scores[[treatment_variable]]))
#propensity_scores$ID <- seq_along(propensity_scores[,1]) # needs to be for each set only
}
return(propensity_scores)
}
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
make_matrix_nbp <- function(propensity_data, estimated_propensity_model, treatment_variable, missing_method,
PS_estimation_object,...){
if(missing_method == "complete"){
eps = 1*10^-100
result = matrix(ncol = nrow(propensity_data), nrow = nrow(propensity_data))
matj = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
matk = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
res = matj - matk
res_squared = res^2
lpj = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
lpk = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
lp_res = lpj - lpk
lp_res_abs = abs(lp_res)
lp_calc = 0.15 * sqrt(var(estimated_propensity_model$lp))
lp_logical = lp_res_abs <= lp_calc
lp_res_squared_plus_eps = (lp_res^2) + eps
res_squared[!lp_logical] = 10^11
res_squared[lp_logical] = 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
distance_matrix_nbp = res_squared
row.names(distance_matrix_nbp) <- propensity_data$ID
}
# else if(missing_method == "mi"){
#
# eps<-1*10^-100 #specify epsilon to be very small positive number
#
# comp = complete(PS_estimation_object$missingness_treated_dataset, "all", include = FALSE)
# multiply_by <- length(comp)
#
# distance_matrix_nbp = matrix(ncol = (nrow(PS_estimation_object[[1]][[1]])+1), nrow = (nrow(PS_estimation_object[[1]][[1]]))*multiply_by) # OG prop data not stacked
#
# for (i in 1:length(comp)) {
#
#   data_for_this_iteration <- subset(estimated_propensity_model, impset == i) # select all rows where impset is for this imputation
#
#   # Matrix (in Lu et al. 2011)
#
#   matj <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(PS_estimation_object[[1]][[1]]), ncol = nrow(PS_estimation_object[[1]][[1]]), byrow = F) # dims set by prop data not data for this iter?
#   matk <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(PS_estimation_object[[1]][[1]]), ncol = nrow(PS_estimation_object[[1]][[1]]), byrow = T)
#
#   res <- matj - matk
#   res_squared <- res^2
#
#   lpj <- matrix(data = data_for_this_iteration$'polly$lp', nrow = nrow(PS_estimation_object[[1]][[1]]), ncol = nrow(PS_estimation_object[[1]][[1]]), byrow = F)
#   lpk <- matrix(data = data_for_this_iteration$'polly$lp', nrow = nrow(PS_estimation_object[[1]][[1]]), ncol = nrow(PS_estimation_object[[1]][[1]]), byrow = T)
#
#   lp_res <- lpj - lpk
#   lp_res_abs <- abs(lp_res)
#   lp_calc <- 0.15 * sqrt(var(data_for_this_iteration$'polly$lp'))
#   lp_logical <- lp_res_abs <= lp_calc
#
#   lp_res_squared_plus_eps <- (lp_res^2) + eps
#
#   res_squared[!lp_logical] <- 10^11
#   res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
#
#   res_squared <- cbind(res_squared, i)
#   start <- (i-1)*nrow(PS_estimation_object[[1]][[1]])+1
#   end <- start + nrow(PS_estimation_object[[1]][[1]]) - 1
#   distance_matrix_nbp[start:end,] <- res_squared
# }
#
# }
return(distance_matrix_nbp)
}
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
library(nbpMatching)
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
library(tidyverse, quietly = T)
restructure_rejoin_nbp <- function(matched_data, propensity_data, treatment_variable, missing_method,...){
if(missing_method == "complete"){
matched_data$pairID<-paste("p", 1:length(matched_data$Group1.ID), sep="") #add in 'pair ID' var
matched_data<-tibble(matched_data) #tibble so that tidyverse can be leveraged
matched_data_long<- tidyr::pivot_longer(matched_data,                   # long format
cols = c(Group1.ID, Group2.ID), #### will need to change accordingly
names_to = "group",
values_to = "ID")
propensity_data$ID <- as.integer(propensity_data$ID)
matched_data_long$ID <- as.integer(matched_data_long$ID)
# merge with data incl. Tr and outcomes:
data_paired <- left_join(propensity_data,matched_data_long, by = "ID")
#create variable indicating high vs low members of pairs
dose_paired_data <- data_paired %>%
mutate(treatment_variable = as.numeric(data_paired[[treatment_variable]])) %>%
group_by(pairID) %>%  #pairID is the ID for each pair
mutate(first = max(treatment_variable) , #create dose variable
treatment_exposure = factor(ifelse(treatment_variable == first, "high", "low"))) %>%
select(-c(group, treatment_variable)) %>%
arrange(., pairID) %>%
ungroup()
dose_paired_data[["treatment"]] = dose_paired_data[[treatment_variable]]
dose_paired_data[[treatment_variable]] = dose_paired_data$treatment_exposure
dose_paired_data <- dose_paired_data %>%
select(-treatment_exposure)
}
else if(missing_method == "mi"){
matched_data <- lapply(matched_data, function(x) paste("p", 1:length(x$Group1.ID), sep = ""))
matched_data<- lapply(matched_data, function(x) dplyr::tibble(x)) #tibble so that tidyverse can be leveraged
matched_data_long <- lapply(matched_data, function(x) tidyr::pivot_longer(x,                   # long format
cols = c(Group1.ID, Group2.ID),
names_to = "group",
values_to = "ID"))
propensity_scores$ID <- seq_along(propensity_scores[,1]) # needs to be for each set only - repeat every nrow(data) times
propensity_data$ID <- as.integer(propensity_data$ID) ### add
matched_data_long$ID <- lapply(matched_data_long, function(x) as.integer(x$ID)) ### sort out to be added to each set
# chameleon = NA ?
### add all below
# merge with data incl. Tr and outcomes:
data_paired <- left_join(propensity_data,matched_data_long, by = "ID") ### add
#create variable indicating high vs low members of pairs
dose_paired_data <- data_paired %>%
mutate(treatment_variable = as.numeric(data_paired[[treatment_variable]])) %>%
group_by(pairID) %>%  #pairID is the ID for each pair
mutate(first = max(treatment_variable) , #create dose variable
treatment_exposure = factor(ifelse(treatment_variable == first, "high", "low"))) %>%
select(-c(group, treatment_variable)) %>%
arrange(., pairID) %>%
ungroup()
dose_paired_data[[treatment_variable]] = dose_paired_data$treatment_exposure
dose_paired_data <- dose_paired_data %>%
select(-treatment_exposure)
}
return(dose_paired_data)
}
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
jkl <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "nbp",
outcome_variable = "mpg", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"),
psmodel_obj = abc, missing_method = "complete")
jkl
