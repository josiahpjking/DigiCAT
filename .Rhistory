?matchit
#### NBP testing ####
# random data - ignore
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
source("R/propensity_estimation_stage.R")
getwd()
setwd("C:/Users/hwright2/Documents/digicat")
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
View(abc)
View(abc)
abc[[2]]
propensity_scores <- PS_estimation_object[[2]]
propensity_scores <- abc[[2]]
propensity_scores <- lapply(propensity_scores, function(x){
as.numeric(as.character(propensity_scores[[gear]]))
}
propensity_scores <- lapply(propensity_scores, function(x){
as.numeric(as.character(propensity_scores[[gear]]))})
propensity_scores <- lapply(propensity_scores, function(x){
as.numeric(as.character(gear))})
propensity_scores <- lapply(propensity_scores, function(x){
as.numeric(as.character("gear"))})
View(mtcars)
View(propensity_scores)
View(propensity_scores)
propensity_scores <- PS_estimation_object[[2]]
propensity_scores <- abc[[2]]
View(propensity_scores)
propensity_scores <- lapply(propensity_scores, function(x) {x[, treatment_variable] <- factor(x[, treatment_variable]) ; x})
propensity_scores <- lapply(propensity_scores, function(x) {propensity_scores[[treatment_variable]] <- factor(propensity_scores[[treatment_variable]]) ; x})
propensity_scores <- lapply(propensity_scores, function(x) {propensity_scores[[gear]] <- factor(propensity_scores[[gear]]) ; x})
View(propensity_scores)
propensity_scores <- lapply(propensity_scores, function(x) {x[, "gear"] <- factor(x[, "gear"]) ; x})
propensity_scores <- lapply(propensity_scores, function(x) {x[, "gear"] <- as.numeric(as.character(x[, "gear"]))) ; x})
propensity_scores <- lapply(propensity_scores, function(x) {x[, "gear"] <- as.numeric(as.character(x[, "gear"])) ; x})
propensity_scores <- lapply(propensity_scores, function(x) {x[, "treatment_variable"] <- as.numeric(as.character(x[, "treatment_variable"])) ; x})
prepare_dataset_nbp <- function(propensity_scores, treatment_variable, missing_method,...){
if(missing_method == "complete"){
propensity_scores[[treatment_variable]] = as.numeric(as.character(propensity_scores[[treatment_variable]]))
propensity_scores$ID <- seq_along(propensity_scores[,1])
}
else if(missing_method == "mi"){
propensity_scores <- lapply(propensity_scores, function(x) {x[, treatment_variable] <- factor(x[, treatment_variable]) ; x})
}
return(propensity_scores)
}
prepare_dataset_nbp(propensity_scores = propensity_scores, treatment_variable = "gear", missing_method = "mi")
a <- prepare_dataset_nbp(propensity_scores = propensity_scores, treatment_variable = "gear", missing_method = "mi")
View(a)
prepare_dataset_nbp <- function(propensity_scores, treatment_variable, missing_method,...){
if(missing_method == "complete"){
propensity_scores[[treatment_variable]] = as.numeric(as.character(propensity_scores[[treatment_variable]]))
propensity_scores$ID <- seq_along(propensity_scores[,1])
}
else if(missing_method == "mi"){
propensity_scores <- lapply(propensity_scores, function(x) {x[, treatment_variable] <- as.numeric(as.character(x[, treatment_variable])) ; x})
}
return(propensity_scores)
}
a <- prepare_dataset_nbp(propensity_scores = propensity_scores, treatment_variable = "gear", missing_method = "mi")
View(a)
View(propensity_scores)
propensity_scores <- abc[[2]]
a <- prepare_dataset_nbp(propensity_scores = propensity_scores, treatment_variable = "gear", missing_method = "mi")
View(a)
nrow(propensity_scores[1]) + 1
ncol(propensity_scores[1]) + 1
ncol(propensity_scores[1])
ncol(propensity_scores[[1]])
ncol(propensity_scores[[1]])+1
nrow(propensity_scores[[1]])*5
View(propensity_scores)
View(propensity_scores)
make_matrix_nbp <- function(propensity_data, estimated_propensity_model, treatment_variable, missing_method,...){
# add mi
if(missing_method == "complete"){
eps = 1*10^-100
result = matrix(ncol = nrow(propensity_data), nrow = nrow(propensity_data))
matj = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
matk = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
res = matj - matk
res_squared = res^2
lpj = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
lpk = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
lp_res = lpj - lpk
lp_res_abs = abs(lp_res)
lp_calc = 0.15 * sqrt(var(estimated_propensity_model$lp))
lp_logical = lp_res_abs <= lp_calc
lp_res_squared_plus_eps = (lp_res^2) + eps
res_squared[!lp_logical] = 10^11
res_squared[lp_logical] = 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
distance_matrix_nbp = res_squared
row.names(distance_matrix_nbp) <- propensity_data$ID
}
else if(missing_method == "mi"){
#create distance matrix:
eps<-1*10^-100 #specify epsilon to be very small positive number
#result <- data.frame() # either collect in list or in dataframe by specifying dimensions in advance
result = matrix(ncol = nrow(propensity_data)+1, nrow = nrow(propensity_data)*5)
for (i in 1:length(imputations)) { # i in len(imp)?
data_for_this_iteration <- subset(propensity_data, impset == i) # select all rows where impset is for this imputation
# Matrix (in Lu et al. 2011)
matj <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data), ncol = ncol(propensity_data), byrow = F)
matk <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data), ncol = ncol(propensity_data), byrow = T)
res <- matj - matk
res_squared <- res^2
lpj <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data), ncol = ncol(propensity_data), byrow = F)
lpk <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data), ncol = ncol(propensity_data), byrow = T)
lp_res <- lpj - lpk
lp_res_abs <- abs(lp_res)
lp_calc <- 0.15 * sqrt(var(data_for_this_iteration$'estimated_propensity_model$lp'))
lp_logical <- lp_res_abs <= lp_calc
lp_res_squared_plus_eps <- (lp_res^2) + eps
res_squared[!lp_logical] <- 10^11
res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
# impset <- i
res_squared <- cbind(res_squared, i)
# result <- rbind(result, res_squared)
start <- (i-1)*nrow(propensity_data)+1
end <- start + nrow(propensity_data) - 1
result[start:end,] <- res_squared
}
}
return(distance_matrix_nbp)
}
c <- make_matrix_nbp(propensity_data = propensity_scores, estimated_propensity_model = abc$estimated_propensity_model, treatment_variable = "gear", missing_method = "mi")
c <- make_matrix_nbp(propensity_data = propensity_scores, estimated_propensity_model = abc$estimated_propensity_model, treatment_variable = gear, missing_method = "mi")
nrow(propensity_scores)
nrow(propensity_scores[1])
nrow(propensity_scores[[1]])
make_matrix_nbp <- function(propensity_data, estimated_propensity_model, treatment_variable, missing_method,...){
# add mi
if(missing_method == "complete"){
eps = 1*10^-100
result = matrix(ncol = nrow(propensity_data), nrow = nrow(propensity_data))
matj = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
matk = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
res = matj - matk
res_squared = res^2
lpj = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
lpk = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
lp_res = lpj - lpk
lp_res_abs = abs(lp_res)
lp_calc = 0.15 * sqrt(var(estimated_propensity_model$lp))
lp_logical = lp_res_abs <= lp_calc
lp_res_squared_plus_eps = (lp_res^2) + eps
res_squared[!lp_logical] = 10^11
res_squared[lp_logical] = 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
distance_matrix_nbp = res_squared
row.names(distance_matrix_nbp) <- propensity_data$ID
}
else if(missing_method == "mi"){
#create distance matrix:
eps<-1*10^-100 #specify epsilon to be very small positive number
#result <- data.frame() # either collect in list or in dataframe by specifying dimensions in advance
result = matrix(ncol = nrow(propensity_data[[1]])+1, nrow = nrow(propensity_data[[1]])*5)
for (i in 1:length(imputations)) { # i in len(imp)?
data_for_this_iteration <- subset(propensity_data, impset == i) # select all rows where impset is for this imputation
# Matrix (in Lu et al. 2011)
matj <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = F)
matk <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = T)
res <- matj - matk
res_squared <- res^2
lpj <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = F)
lpk <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = T)
lp_res <- lpj - lpk
lp_res_abs <- abs(lp_res)
lp_calc <- 0.15 * sqrt(var(data_for_this_iteration$'estimated_propensity_model$lp'))
lp_logical <- lp_res_abs <= lp_calc
lp_res_squared_plus_eps <- (lp_res^2) + eps
res_squared[!lp_logical] <- 10^11
res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
# impset <- i
res_squared <- cbind(res_squared, i)
# result <- rbind(result, res_squared)
start <- (i-1)*nrow(propensity_data[[1]])+1
end <- start + nrow(propensity_data[[1]]) - 1
result[start:end,] <- res_squared
}
}
return(distance_matrix_nbp)
}
c <- make_matrix_nbp(propensity_data = propensity_scores, estimated_propensity_model = abc$estimated_propensity_model, treatment_variable = gear, missing_method = "mi")
comp <- complete(handled_missingness, "all", include = FALSE)
View(comp)
make_matrix_nbp <- function(propensity_data, estimated_propensity_model, treatment_variable, missing_method,...){
# add mi
if(missing_method == "complete"){
eps = 1*10^-100
result = matrix(ncol = nrow(propensity_data), nrow = nrow(propensity_data))
matj = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
matk = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
res = matj - matk
res_squared = res^2
lpj = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
lpk = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
lp_res = lpj - lpk
lp_res_abs = abs(lp_res)
lp_calc = 0.15 * sqrt(var(estimated_propensity_model$lp))
lp_logical = lp_res_abs <= lp_calc
lp_res_squared_plus_eps = (lp_res^2) + eps
res_squared[!lp_logical] = 10^11
res_squared[lp_logical] = 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
distance_matrix_nbp = res_squared
row.names(distance_matrix_nbp) <- propensity_data$ID
}
else if(missing_method == "mi"){
#create distance matrix:
eps<-1*10^-100 #specify epsilon to be very small positive number
#result <- data.frame() # either collect in list or in dataframe by specifying dimensions in advance
result = matrix(ncol = nrow(propensity_data[[1]])+1, nrow = nrow(propensity_data[[1]])*5)
for (i in 1:length(comp)) { # i in len(imp)?
data_for_this_iteration <- subset(propensity_data, impset == i) # select all rows where impset is for this imputation
# Matrix (in Lu et al. 2011)
matj <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = F)
matk <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = T)
res <- matj - matk
res_squared <- res^2
lpj <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = F)
lpk <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = T)
lp_res <- lpj - lpk
lp_res_abs <- abs(lp_res)
lp_calc <- 0.15 * sqrt(var(data_for_this_iteration$'estimated_propensity_model$lp'))
lp_logical <- lp_res_abs <= lp_calc
lp_res_squared_plus_eps <- (lp_res^2) + eps
res_squared[!lp_logical] <- 10^11
res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
# impset <- i
res_squared <- cbind(res_squared, i)
# result <- rbind(result, res_squared)
start <- (i-1)*nrow(propensity_data[[1]])+1
end <- start + nrow(propensity_data[[1]]) - 1
result[start:end,] <- res_squared
}
}
return(distance_matrix_nbp)
}
View(comp)
c <- make_matrix_nbp(propensity_data = propensity_scores, estimated_propensity_model = abc$estimated_propensity_model, treatment_variable = gear, missing_method = "mi")
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
View(abc)
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
View(abc)
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
a <- i
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
View(abc)
mtcars$impset <- i
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
result = matrix(ncol = nrow(propensity_scores[[1]])+1, nrow = nrow(propensity_scores[[1]])*5)
eesult
result
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
# estimated_propensity_model = lapply(complete(handled_missingness, "all"),
#                                    function(x) MASS::polr(f, data = x, Hess =T,...))
comp <- complete(handled_missingness, "all", include = FALSE)
pollypslist <- data.frame()
for (i in 1:length(comp)){
polly <- MASS::polr(f, data = comp[[i]],
Hess=T)
res <- as.data.frame(cbind(comp[[i]], polly$model,polly$lp))
res$impset <- i
estimated_propensity_model <- rbind(pollypslist,res)
}
} else if(missing_method == "complete"){
handled_missingness[[treatment_variable]] <- as.factor(handled_missingness[[treatment_variable]])
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
estimate_model(handled_missingness = handled_missingness, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
imm <- estimate_model(handled_missingness = handled_missingness, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
View(imm)
View(imm)
View(handled_missingness)
imm <- estimate_model(handled_missingness = handled_missingness, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
length(comp)
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
# estimated_propensity_model = lapply(complete(handled_missingness, "all"),
#                                    function(x) MASS::polr(f, data = x, Hess =T,...))
comp <- complete(handled_missingness, "all", include = FALSE)
pollypslist <- data.frame()
for (i in 1:length(comp)){
polly <- MASS::polr(f, data = comp[[i]],
Hess=T)
res <- as.data.frame(cbind(comp[[i]], polly$model,polly$lp))
res$impset <- i
pollypslist <- rbind(pollypslist,res)
}
} else if(missing_method == "complete"){
handled_missingness[[treatment_variable]] <- as.factor(handled_missingness[[treatment_variable]])
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(pollypslist)
}
imm <- estimate_model(handled_missingness = handled_missingness, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
View(imm)
make_matrix_nbp <- function(propensity_data, estimated_propensity_model, treatment_variable, missing_method,...){
# add mi
if(missing_method == "complete"){
eps = 1*10^-100
result = matrix(ncol = nrow(propensity_data), nrow = nrow(propensity_data))
matj = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
matk = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
res = matj - matk
res_squared = res^2
lpj = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
lpk = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
lp_res = lpj - lpk
lp_res_abs = abs(lp_res)
lp_calc = 0.15 * sqrt(var(estimated_propensity_model$lp))
lp_logical = lp_res_abs <= lp_calc
lp_res_squared_plus_eps = (lp_res^2) + eps
res_squared[!lp_logical] = 10^11
res_squared[lp_logical] = 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
distance_matrix_nbp = res_squared
row.names(distance_matrix_nbp) <- propensity_data$ID
}
else if(missing_method == "mi"){
imputed_n <- complete(handled_missingness, "all", include = FALSE)
#create distance matrix:
eps<-1*10^-100 #specify epsilon to be very small positive number
#result <- data.frame() # either collect in list or in dataframe by specifying dimensions in advance
result = matrix(ncol = nrow(propensity_data[[1]])+1, nrow = nrow(propensity_data[[1]])*5)
for (i in 1:length(imputed_n)) { # i in len(imp)?
data_for_this_iteration <- subset(propensity_data, impset == i) # select all rows where impset is for this imputation
# Matrix (in Lu et al. 2011)
matj <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = F)
matk <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = T)
res <- matj - matk
res_squared <- res^2
lpj <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = F)
lpk <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data[[1]]), ncol = ncol(propensity_data[[1]]), byrow = T)
lp_res <- lpj - lpk
lp_res_abs <- abs(lp_res)
lp_calc <- 0.15 * sqrt(var(data_for_this_iteration$'estimated_propensity_model$lp'))
lp_logical <- lp_res_abs <= lp_calc
lp_res_squared_plus_eps <- (lp_res^2) + eps
res_squared[!lp_logical] <- 10^11
res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
# impset <- i
res_squared <- cbind(res_squared, i)
# result <- rbind(result, res_squared)
start <- (i-1)*nrow(propensity_data[[1]])+1
end <- start + nrow(propensity_data[[1]]) - 1
result[start:end,] <- res_squared
}
}
return(distance_matrix_nbp)
}
make_matrix_nbp(imm, abc$estimated_propensity_model, treatment_variable = "gear", missing_method = "mi")
nrow(imm)
imm[[1]]
nrow(imm[[1]])
make_matrix_nbp <- function(propensity_data, estimated_propensity_model, treatment_variable, missing_method,...){
# add mi
if(missing_method == "complete"){
eps = 1*10^-100
result = matrix(ncol = nrow(propensity_data), nrow = nrow(propensity_data))
matj = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
matk = matrix(data = propensity_data[[treatment_variable]], nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
res = matj - matk
res_squared = res^2
lpj = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = F)
lpk = matrix(data = estimated_propensity_model$lp, nrow = nrow(propensity_data), ncol = nrow(propensity_data), byrow = T)
lp_res = lpj - lpk
lp_res_abs = abs(lp_res)
lp_calc = 0.15 * sqrt(var(estimated_propensity_model$lp))
lp_logical = lp_res_abs <= lp_calc
lp_res_squared_plus_eps = (lp_res^2) + eps
res_squared[!lp_logical] = 10^11
res_squared[lp_logical] = 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
distance_matrix_nbp = res_squared
row.names(distance_matrix_nbp) <- propensity_data$ID
}
else if(missing_method == "mi"){
imputed_n <- complete(handled_missingness, "all", include = FALSE)
#create distance matrix:
eps<-1*10^-100 #specify epsilon to be very small positive number
#result <- data.frame() # either collect in list or in dataframe by specifying dimensions in advance
result = matrix(ncol = nrow(propensity_data)+1, nrow = nrow(propensity_data)*5)
for (i in 1:length(imputed_n)) { # i in len(imp)?
data_for_this_iteration <- subset(propensity_data, impset == i) # select all rows where impset is for this imputation
# Matrix (in Lu et al. 2011)
matj <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data), ncol = ncol(propensity_data), byrow = F)
matk <- matrix(data = data_for_this_iteration[[treatment_variable]], nrow = nrow(propensity_data), ncol = ncol(propensity_data), byrow = T)
res <- matj - matk
res_squared <- res^2
lpj <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data), ncol = ncol(propensity_data), byrow = F)
lpk <- matrix(data = data_for_this_iteration$'estimated_propensity_model$lp', nrow = nrow(propensity_data), ncol = ncol(propensity_data), byrow = T)
lp_res <- lpj - lpk
lp_res_abs <- abs(lp_res)
lp_calc <- 0.15 * sqrt(var(data_for_this_iteration$'estimated_propensity_model$lp'))
lp_logical <- lp_res_abs <= lp_calc
lp_res_squared_plus_eps <- (lp_res^2) + eps
res_squared[!lp_logical] <- 10^11
res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
# impset <- i
res_squared <- cbind(res_squared, i)
# result <- rbind(result, res_squared)
start <- (i-1)*nrow(propensity_data)+1
end <- start + nrow(propensity_data) - 1
result[start:end,] <- res_squared
}
}
return(distance_matrix_nbp)
}
make_matrix_nbp(imm, abc$estimated_propensity_model, treatment_variable = "gear", missing_method = "mi")
source("R/propensity_estimation_stage.R")
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
install.packages("remotes")
remotes::install_github("uoe-digicat/DigiCAT")
library(DigiCAT)
DigiCAT::run_DigiCAT(enableLocal =  F)
