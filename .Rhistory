#
#   pollyps$ID <- seq_along(pollyps[,1])
#   pollyps$ID <- as.character(pollyps$ID)
#
#      #create distance matrix:
#
#      eps<-1*10^-100 #specify epsilon to be very small positive number
#      result <- matrix(ncol = nrow(pollyps), nrow = nrow(pollyps))
#
# matj <- matrix(data = treatment_values, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = F)
#                       matk <- matrix(data = treatment_values, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = T)
#
#                      res <- matj - matk
#                      res_squared <- res^2
#
#                      lpj <- matrix(data = polr_res$lp, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = F)
#                      lpk <- matrix(data = polr_res$lp, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = T)
#
#                      lp_res <- lpj - lpk
#                      lp_res_abs <- abs(lp_res)
#                      lp_calc <- 0.15 * sqrt(var(polr_res$lp))
#                      lp_logical <- lp_res_abs <= lp_calc
#
#                      lp_res_squared_plus_eps <- (lp_res^2) + eps
#
#                      res_squared[!lp_logical] <- 10^11
#                      res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
#
#                      result <- res_squared
#
#                      row.names(result)<-pollyps$ID
#
#                      dist1<-nbpMatching::distancematrix(result)
#
#                      nbpmatches<-nbpMatching::nonbimatch(dist1,
#                                                          threshold=999999,
#                                                          precision = 7)
#
#                      nbpmatches_matched<-nbpmatches$halves[nbpmatches$halves$Distance!=999999, ] # eliminate unmatched
#
#                      nbpmatches_matched$pairID<-paste("p", 1:length(nbpmatches_matched$Group1.ID), sep="") #add in 'pair ID' var
#                      nbpmatches_matched<-tibble(nbpmatches_matched) #tibble so that tidyverse can be leveraged
#                      nbpmatches_matched_long<- tidyr::pivot_longer(nbpmatches_matched,                   # long format
#                                                                    cols = c(Group1.ID, Group2.ID),
#                                                                    names_to = "group",
#                                                                    values_to = "ID")
#
#                     dat_cols <- data.frame(pollyps) # recreate dataframe
#
#                     newdata_paired <- left_join(dat_cols, nbpmatches_matched_long, by = "ID")
#
#                     newdata_paired2 <- newdata_paired %>%
#                        mutate(treatment_values = as.numeric(treatment_values)) %>%
#       group_by(pairID) %>%  #pairID is the ID for each pair
#       mutate(first = max(treatment_values) , #create dose variable
#              treatment_exposure = factor(ifelse(treatment_values == first, "high", "low"))) %>%
#       #select(-c(group, treatment_variable)) %>%
#       arrange(., pairID) %>%
#       ungroup()
#
#      nbp_outcome <- lm(outcome_values ~ treatment_exposure + matching_values, data = newdata_paired2)
#
})
#
#  pooled_nbp <- summary(mice::pool(xyz))
}
nbp_mi_quick(handled_missingness = handled_missingness, treatment_variable = "gear", matching_variable = c("disp", "qsec"))
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
#comp <- complete(handled_missingness, "all", include = FALSE)
xyz <- with(handled_missingness, {
# f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
#
# polr_res <- MASS::polr(as.formula(f), Hess = T)
#
# treatment_values <- get(treatment_variable)
# treatment_values <- as.numeric(as.character(treatment_values))
# matching_values <- list()
# for(matching_variable_name in matching_variable){
#   tmp <- get(matching_variable_name)
#   matching_values <- append(matching_values, tmp)
# }
#     outcome_values <- get(outcome_variable)
#
#   dat_cols <- data.frame(treatment_values,
#                             matching_values,
#                             outcome_values)
#
#   pollyps <- as.data.frame(cbind(
#      dat_cols,
#     polr_res$model,polr_res$lp))
#
#   pollyps$ID <- seq_along(pollyps[,1])
#   pollyps$ID <- as.character(pollyps$ID)
#
#      #create distance matrix:
#
#      eps<-1*10^-100 #specify epsilon to be very small positive number
#      result <- matrix(ncol = nrow(pollyps), nrow = nrow(pollyps))
#
# matj <- matrix(data = treatment_values, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = F)
#                       matk <- matrix(data = treatment_values, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = T)
#
#                      res <- matj - matk
#                      res_squared <- res^2
#
#                      lpj <- matrix(data = polr_res$lp, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = F)
#                      lpk <- matrix(data = polr_res$lp, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = T)
#
#                      lp_res <- lpj - lpk
#                      lp_res_abs <- abs(lp_res)
#                      lp_calc <- 0.15 * sqrt(var(polr_res$lp))
#                      lp_logical <- lp_res_abs <= lp_calc
#
#                      lp_res_squared_plus_eps <- (lp_res^2) + eps
#
#                      res_squared[!lp_logical] <- 10^11
#                      res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
#
#                      result <- res_squared
#
#                      row.names(result)<-pollyps$ID
#
#                      dist1<-nbpMatching::distancematrix(result)
#
#                      nbpmatches<-nbpMatching::nonbimatch(dist1,
#                                                          threshold=999999,
#                                                          precision = 7)
#
#                      nbpmatches_matched<-nbpmatches$halves[nbpmatches$halves$Distance!=999999, ] # eliminate unmatched
#
#                      nbpmatches_matched$pairID<-paste("p", 1:length(nbpmatches_matched$Group1.ID), sep="") #add in 'pair ID' var
#                      nbpmatches_matched<-tibble(nbpmatches_matched) #tibble so that tidyverse can be leveraged
#                      nbpmatches_matched_long<- tidyr::pivot_longer(nbpmatches_matched,                   # long format
#                                                                    cols = c(Group1.ID, Group2.ID),
#                                                                    names_to = "group",
#                                                                    values_to = "ID")
#
#                     dat_cols <- data.frame(pollyps) # recreate dataframe
#
#                     newdata_paired <- left_join(dat_cols, nbpmatches_matched_long, by = "ID")
#
#                     newdata_paired2 <- newdata_paired %>%
#                        mutate(treatment_values = as.numeric(treatment_values)) %>%
#       group_by(pairID) %>%  #pairID is the ID for each pair
#       mutate(first = max(treatment_values) , #create dose variable
#              treatment_exposure = factor(ifelse(treatment_values == first, "high", "low"))) %>%
#       #select(-c(group, treatment_variable)) %>%
#       arrange(., pairID) %>%
#       ungroup()
#
#      nbp_outcome <- lm(outcome_values ~ treatment_exposure + matching_values, data = newdata_paired2)
#
})
#
#  pooled_nbp <- summary(mice::pool(xyz))
}
nbp_mi_quick(handled_missingness = handled_missingness, treatment_variable = "gear", matching_variable = c("disp", "qsec"))
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
#comp <- complete(handled_missingness, "all", include = FALSE)
xyz <- with(handled_missingness, {
# f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
#
# polr_res <- MASS::polr(as.formula(f), Hess = T)
#
# treatment_values <- get(treatment_variable)
# treatment_values <- as.numeric(as.character(treatment_values))
# matching_values <- list()
# for(matching_variable_name in matching_variable){
#   tmp <- get(matching_variable_name)
#   matching_values <- append(matching_values, tmp)
}
#     outcome_values <- get(outcome_variable)
#
#   dat_cols <- data.frame(treatment_values,
#                             matching_values,
#                             outcome_values)
#
#   pollyps <- as.data.frame(cbind(
#      dat_cols,
#     polr_res$model,polr_res$lp))
#
#   pollyps$ID <- seq_along(pollyps[,1])
#   pollyps$ID <- as.character(pollyps$ID)
#
#      #create distance matrix:
#
#      eps<-1*10^-100 #specify epsilon to be very small positive number
#      result <- matrix(ncol = nrow(pollyps), nrow = nrow(pollyps))
#
# matj <- matrix(data = treatment_values, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = F)
#                       matk <- matrix(data = treatment_values, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = T)
#
#                      res <- matj - matk
#                      res_squared <- res^2
#
#                      lpj <- matrix(data = polr_res$lp, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = F)
#                      lpk <- matrix(data = polr_res$lp, nrow = nrow(pollyps), ncol = nrow(pollyps), byrow = T)
#
#                      lp_res <- lpj - lpk
#                      lp_res_abs <- abs(lp_res)
#                      lp_calc <- 0.15 * sqrt(var(polr_res$lp))
#                      lp_logical <- lp_res_abs <= lp_calc
#
#                      lp_res_squared_plus_eps <- (lp_res^2) + eps
#
#                      res_squared[!lp_logical] <- 10^11
#                      res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
#
#                      result <- res_squared
#
#                      row.names(result)<-pollyps$ID
#
#                      dist1<-nbpMatching::distancematrix(result)
#
#                      nbpmatches<-nbpMatching::nonbimatch(dist1,
#                                                          threshold=999999,
#                                                          precision = 7)
#
#                      nbpmatches_matched<-nbpmatches$halves[nbpmatches$halves$Distance!=999999, ] # eliminate unmatched
#
#                      nbpmatches_matched$pairID<-paste("p", 1:length(nbpmatches_matched$Group1.ID), sep="") #add in 'pair ID' var
#                      nbpmatches_matched<-tibble(nbpmatches_matched) #tibble so that tidyverse can be leveraged
#                      nbpmatches_matched_long<- tidyr::pivot_longer(nbpmatches_matched,                   # long format
#                                                                    cols = c(Group1.ID, Group2.ID),
#                                                                    names_to = "group",
#                                                                    values_to = "ID")
#
#                     dat_cols <- data.frame(pollyps) # recreate dataframe
#
#                     newdata_paired <- left_join(dat_cols, nbpmatches_matched_long, by = "ID")
#
#                     newdata_paired2 <- newdata_paired %>%
#                        mutate(treatment_values = as.numeric(treatment_values)) %>%
#       group_by(pairID) %>%  #pairID is the ID for each pair
#       mutate(first = max(treatment_values) , #create dose variable
#              treatment_exposure = factor(ifelse(treatment_values == first, "high", "low"))) %>%
#       #select(-c(group, treatment_variable)) %>%
#       arrange(., pairID) %>%
#       ungroup()
#
#      nbp_outcome <- lm(outcome_values ~ treatment_exposure + matching_values, data = newdata_paired2)
#
#})
#
#  pooled_nbp <- summary(mice::pool(xyz))
}
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
#comp <- complete(handled_missingness, "all", include = FALSE)
xyz <- with(handled_missingness, {
# f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
#
# polr_res <- MASS::polr(as.formula(f), Hess = T)
#
# treatment_values <- get(treatment_variable)
# treatment_values <- as.numeric(as.character(treatment_values))
# matching_values <- list()
# for(matching_variable_name in matching_variable){
#   tmp <- get(matching_variable_name)
#   matching_values <- append(matching_values, tmp)
})}
nbp_mi_quick(handled_missingness = handled_missingness, treatment_variable = "gear", matching_variable = c("disp", "qsec"))
nbp_mi_quick(handled_missingness = handled_missingness, treatment_variable = "gear", matching_variable = c("disp", "qsec"), outcome_variable = "mpg")
data(mtcars)
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
#comp <- complete(handled_missingness, "all", include = FALSE)
xyz <- with(handled_missingness, {
# f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
#
# polr_res <- MASS::polr(as.formula(f), Hess = T)
#
# treatment_values <- get(treatment_variable)
# treatment_values <- as.numeric(as.character(treatment_values))
# matching_values <- list()
# for(matching_variable_name in matching_variable){
#   tmp <- get(matching_variable_name)
#   matching_values <- append(matching_values, tmp)
})}
nbp_mi_quick(handled_missingness = handled_missingness, treatment_variable = "gear", outcome_variable = "mpg", matching_variable = c("disp", "qsec"))
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
#comp <- complete(handled_missingness, "all", include = FALSE)
xyz <- with(handled_missingness, {
# f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
#
# polr_res <- MASS::polr(as.formula(f), Hess = T)
#
# treatment_values <- get(treatment_variable)
# treatment_values <- as.numeric(as.character(treatment_values))
matching_values <- list()
for(matching_variable_name in matching_variable){
tmp <- get(matching_variable_name)
matching_values <- append(matching_values, tmp)
}})}
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
gc()
gc()
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
handled_missingness <- mice::mice(mtcars)
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
#comp <- complete(handled_missingness, "all", include = FALSE)
xyz <- with(handled_missingness, {
# f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
#
# polr_res <- MASS::polr(as.formula(f), Hess = T)
#
# treatment_values <- get(treatment_variable)
# treatment_values <- as.numeric(as.character(treatment_values))
matching_values <- list()
for(matching_variable_name in matching_variable){
tmp <- get(matching_variable_name)
matching_values <- append(matching_values, tmp)
}})}
handled_missingness <- mice::mice(mtcars)
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
handled_missingness <- mice::mice(mtcars, method = "rf")
handled_missingness <- mice::mice(mtcars, method = "pmm")
gc()
#### NBP testing ####
# random data - ignore
data(mtcars)
handled <- mice(mtcars)
handled <- mice::mice(mtcars)
handled <- mice::mice(mtcars)
handled <- mice::mice(mtcars)
#### NBP testing ####
# random data - ignore
data(mtcars)
handled <- mice::mice(mtcars)
handled <- mice::mice(mtcars)
#### NBP testing ####
# random data - ignore
data(mtcars)
setwd("C:/Users/hwright2/Documents/digicat")
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
View(abc)
propensity_scores <- abc[[2]]
mtcars[1,]
mtcars[,1]
mtcars[1,1]
View(mtcars)
eps<-1*10^-100 #specify epsilon to be very small positive number
distance_matrix_nbp = matrix(ncol = nrow(propensity_scores)+1, nrow = nrow(propensity_scores)*5)
comp = complete(handled_missingness, "all", include = FALSE)
comp = complete(abc$missingness_treated_dataset, "all", include = FALSE)
nrow(propensity_scores)
nrow(propensity_scores)
nrow(propensity_scores)*5
View(comp)
data_for_this_iteration <- subset(propensity_scores, impset == i) # select all rows where impset is for this imputation
View(propensity_scores)
for (i in 1:length(comp)) {
data_for_this_iteration <- subset(propensity_scores, impset == i) # select all rows where impset is for this imputation
# Matrix (in Lu et al. 2011)
matj <- matrix(data = data_for_this_iteration$gear, nrow = nrow(propensity_scores), ncol = nrow(propensity_scores), byrow = F) # dims set by prop data not data for this iter?
matk <- matrix(data = data_for_this_iteration$gear, nrow = nrow(propensity_scores), ncol = nrow(propensity_scores), byrow = T)
res <- matj - matk
res_squared <- res^2
lpj <- matrix(data = data_for_this_iteration$'polly$lp', nrow = nrow(propensity_scores), ncol = nrow(propensity_scores), byrow = F)
lpk <- matrix(data = data_for_this_iteration$'polly$lp', nrow = nrow(propensity_scores), ncol = nrow(propensity_scores), byrow = T)
lp_res <- lpj - lpk
lp_res_abs <- abs(lp_res)
lp_calc <- 0.15 * sqrt(var(data_for_this_iteration$'polly$lp'))
lp_logical <- lp_res_abs <= lp_calc
lp_res_squared_plus_eps <- (lp_res^2) + eps
res_squared[!lp_logical] <- 10^11
res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
# impset <- i
# print(i)
res_squared <- cbind(res_squared, i)
#result <- rbind(result, res_squared)
start <- (i-1)*nrow(propensity_scores)+1
end <- start + nrow(propensity_scores) - 1
result[start:end,] <- res_squared
}
prepare_dataset_nbp <- function(propensity_scores, treatment_variable, missing_method,...){
if(missing_method == "complete"){
propensity_scores[[treatment_variable]] = as.numeric(as.character(propensity_scores[[treatment_variable]]))
propensity_scores$ID <- seq_along(propensity_scores[,1])
}
else if(missing_method == "mi"){
#propensity_scores <- lapply(propensity_scores, function(x) {x[, treatment_variable] <- as.numeric(as.character(x[, treatment_variable])) ; x})
propensity_scores[[treatment_variable]] = as.numeric(as.character(propensity_scores[[treatment_variable]]))
#propensity_scores$ID <- seq_along(propensity_scores[,1]) # needs to be for each set only
}
return(propensity_scores)
}
propensity_scores <- prepare_dataset_nbp(propensity_scores = propensity_scores, treatment_variable = "gear", missing_method = "mi")
str(propensity_scores)
for (i in 1:length(comp)) {
data_for_this_iteration <- subset(propensity_scores, impset == i) # select all rows where impset is for this imputation
# Matrix (in Lu et al. 2011)
matj <- matrix(data = data_for_this_iteration$gear, nrow = nrow(propensity_scores), ncol = nrow(propensity_scores), byrow = F) # dims set by prop data not data for this iter?
matk <- matrix(data = data_for_this_iteration$gear, nrow = nrow(propensity_scores), ncol = nrow(propensity_scores), byrow = T)
res <- matj - matk
res_squared <- res^2
lpj <- matrix(data = data_for_this_iteration$'polly$lp', nrow = nrow(propensity_scores), ncol = nrow(propensity_scores), byrow = F)
lpk <- matrix(data = data_for_this_iteration$'polly$lp', nrow = nrow(propensity_scores), ncol = nrow(propensity_scores), byrow = T)
lp_res <- lpj - lpk
lp_res_abs <- abs(lp_res)
lp_calc <- 0.15 * sqrt(var(data_for_this_iteration$'polly$lp'))
lp_logical <- lp_res_abs <= lp_calc
lp_res_squared_plus_eps <- (lp_res^2) + eps
res_squared[!lp_logical] <- 10^11
res_squared[lp_logical] <- 10^11 * (lp_res_squared_plus_eps[lp_logical]) / res_squared[lp_logical]
# impset <- i
# print(i)
res_squared <- cbind(res_squared, i)
#result <- rbind(result, res_squared)
start <- (i-1)*nrow(propensity_scores)+1
end <- start + nrow(propensity_scores) - 1
result[start:end,] <- res_squared
}
distance_matrix_nbp[start:end,] <- res_squared
isSymmetric(distance_matrix_nbp)
dim(distance_matrix_nbp)
formatted_matrix <- distancematrix(distance_matrix_nbp)
formatted_matrix <- nbpMatching::distancematrix(distance_matrix_nbp)
#### Read in data ####
mcs <- read.csv("~/Desktop/Reading & MH/Analysis/Data/alldata_updated2.csv", stringsAsFactors = T)
160*160
160*161
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
xyz <- with(handled_missingness, {
# f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
#
# polr_res <- MASS::polr(as.formula(f), Hess = T)
#
# treatment_values <- get(treatment_variable)
# treatment_values <- as.numeric(as.character(treatment_values))
matching_values <- lapply(matching_variable, function(x) get(x))})}
idk <- nbp_mi_quick(abc$missingness_treated_dataset, treatment_variable = "gear", outcome_variable = "mpg", matching_variable = c("disp", "qsec"))
View(idk)
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
xyz <- with(handled_missingness, {
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
polr_res <- MASS::polr(as.formula(f), Hess = T)
treatment_values <- get(treatment_variable)
treatment_values <- as.numeric(as.character(treatment_values))
matching_values <- lapply(matching_variable, function(x) get(x))})}
idk <- nbp_mi_quick(abc$missingness_treated_dataset, treatment_variable = "gear", outcome_variable = "mpg", matching_variable = c("disp", "qsec"))
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
xyz <- with(handled_missingness, {
comp <- mice::complete(handled_missingness, "long", include = TRUE)
comp[[treatment_variable]] <- as.factor(comp[[treatment_variable]])
handled_missingness <- as.mids(comp)
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
polr_res <- MASS::polr(as.formula(f), Hess = T)
treatment_values <- get(treatment_variable)
treatment_values <- as.numeric(as.character(treatment_values))
matching_values <- lapply(matching_variable, function(x) get(x))})}
idk <- nbp_mi_quick(abc$missingness_treated_dataset, treatment_variable = "gear", outcome_variable = "mpg", matching_variable = c("disp", "qsec"))
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
xyz <- with(handled_missingness, {
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
polr_res <- MASS::polr(as.formula(f), Hess = T)
treatment_values <- get(treatment_variable)
treatment_values <- as.numeric(as.character(treatment_values))
matching_values <- lapply(matching_variable, function(x) get(x))})}
handled_missingness <- mice::mice(mtcars)
idk <- nbp_mi_quick(abc$missingness_treated_dataset, treatment_variable = "gear", outcome_variable = "mpg", matching_variable = c("disp", "qsec"))
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
idk <- nbp_mi_quick(abc$missingness_treated_dataset, treatment_variable = "gear", outcome_variable = "mpg", matching_variable = c("disp", "qsec"))
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
handled_missingness <- mice::mice(mtcars)
nbp_mi_quick <- function(handled_missingness, treatment_variable, outcome_variable,
matching_variable,...){
xyz <- with(handled_missingness, {
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
polr_res <- MASS::polr(as.formula(f), Hess = T)
treatment_values <- get(treatment_variable)
treatment_values <- as.numeric(as.character(treatment_values))
matching_values <- lapply(matching_variable, function(x) get(x))})}
handled_missingness <- mice::mice(mtcars)
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
gc()
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
handled_missingness <- mice::mice(mtcars)
gc()
