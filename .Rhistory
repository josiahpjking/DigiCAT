}
stop("I need a valid model! (glm, gbm, rforest, poly, lm)")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
} else {
f = as.formula(paste0("as.factor(", treatment_variable,") ~",paste0(matching_variable, collapse="+")))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), #
function(x) gbm(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model = gbm(as.formula(f), data = handled_missingness,...) #
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest::randomForest(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest::randomForest(as.formula(f), data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
# estimated_propensity_model = lapply(complete(handled_missingness, "all"),
#                                    function(x) MASS::polr(f, data = x, Hess =T,...))
comp <- mice::complete(handled_missingness, "long", include = TRUE)
comp[[treatment_variable]] <- as.factor(comp[[treatment_variable]])
handled_missingness <- as.mids(comp)
comp <- mice::complete(handled_missingness, "all", include = FALSE)
estimated_propensity_model <- data.frame()
for (i in 1:length(comp)){
polly <- MASS::polr(f, data = comp[[i]],
Hess=T)
res <- as.data.frame(cbind(comp[[i]],
polly$model,
polly$lp))
res$impset <- i
estimated_propensity_model <- rbind(estimated_propensity_model,res)
}
}else if(missing_method == "complete"){
handled_missingness[[treatment_variable]] <- as.factor(handled_missingness[[treatment_variable]])
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
} else if(missing_method == "weighting"){
handled_missingness[[7]][[treatment_variable]] <- as.factor(handled_missingness[[7]][[treatment_variable]])
estimated_propensity_model = svyolr(f, design=handled_missingness)
}
},
lm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family = gaussian(link = "identity"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = gaussian(link = "identity"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly, lm)")
)
return(estimated_propensity_model)
}
View(df)
es_m <- estimate_model(mis, "lm", "t",c("a","b"), "complete")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
browser()
if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
} else {
f = as.formula(paste0("as.factor(", treatment_variable,") ~",paste0(matching_variable, collapse="+")))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), #
function(x) gbm(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model = gbm(as.formula(f), data = handled_missingness,...) #
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest::randomForest(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest::randomForest(as.formula(f), data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
# estimated_propensity_model = lapply(complete(handled_missingness, "all"),
#                                    function(x) MASS::polr(f, data = x, Hess =T,...))
comp <- mice::complete(handled_missingness, "long", include = TRUE)
comp[[treatment_variable]] <- as.factor(comp[[treatment_variable]])
handled_missingness <- as.mids(comp)
comp <- mice::complete(handled_missingness, "all", include = FALSE)
estimated_propensity_model <- data.frame()
for (i in 1:length(comp)){
polly <- MASS::polr(f, data = comp[[i]],
Hess=T)
res <- as.data.frame(cbind(comp[[i]],
polly$model,
polly$lp))
res$impset <- i
estimated_propensity_model <- rbind(estimated_propensity_model,res)
}
}else if(missing_method == "complete"){
handled_missingness[[treatment_variable]] <- as.factor(handled_missingness[[treatment_variable]])
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
} else if(missing_method == "weighting"){
handled_missingness[[7]][[treatment_variable]] <- as.factor(handled_missingness[[7]][[treatment_variable]])
estimated_propensity_model = svyolr(f, design=handled_missingness)
}
},
lm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family = gaussian(link = "identity"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = gaussian(link = "identity"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly, lm)")
)
return(estimated_propensity_model)
}
es_m <- estimate_model(mis, "lm", "t",c("a","b"), "complete")
View(mis)
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
browser()
if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
} else {
f = as.formula(paste0("as.factor(", treatment_variable,") ~",paste0(matching_variable, collapse="+")))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), #
function(x) gbm(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model = gbm(as.formula(f), data = handled_missingness,...) #
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest::randomForest(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest::randomForest(as.formula(f), data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
# estimated_propensity_model = lapply(complete(handled_missingness, "all"),
#                                    function(x) MASS::polr(f, data = x, Hess =T,...))
comp <- mice::complete(handled_missingness, "long", include = TRUE)
comp[[treatment_variable]] <- as.factor(comp[[treatment_variable]])
handled_missingness <- as.mids(comp)
comp <- mice::complete(handled_missingness, "all", include = FALSE)
estimated_propensity_model <- data.frame()
for (i in 1:length(comp)){
polly <- MASS::polr(f, data = comp[[i]],
Hess=T)
res <- as.data.frame(cbind(comp[[i]],
polly$model,
polly$lp))
res$impset <- i
estimated_propensity_model <- rbind(estimated_propensity_model,res)
}
}else if(missing_method == "complete"){
handled_missingness[[treatment_variable]] <- as.factor(handled_missingness[[treatment_variable]])
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
} else if(missing_method == "weighting"){
handled_missingness[[7]][[treatment_variable]] <- as.factor(handled_missingness[[7]][[treatment_variable]])
estimated_propensity_model = svyolr(f, design=handled_missingness)
}
},
lm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family = gaussian(link = "identity"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness[[1]],
family = gaussian(link = "identity"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly, lm)")
)
return(estimated_propensity_model)
}
es_m <- estimate_model(mis, "lm", "t",c("a","b"), "complete")
View(es_m)
source("R/propensity_estimation_stage.R")
getwd()
setwd("C:/Users/hwright2/Documents/DigiCAT")
source("R/propensity_estimation_stage.R")
source("R/evaluate_imputations.R")
source("R/evaluate_propensity_stage.R")
source("R/balance_data.R")
source("R/outcome_analysis_stage.R")
abc <- estimation_stage(.data = df2$amp, missing_method = "complete", model_type = "lm",
treatment_variable = "t", matching_variable = c("a", "b"))
q
source("R/propensity_estimation_stage.R")
source("R/evaluate_imputations.R")
source("R/evaluate_propensity_stage.R")
source("R/balance_data.R")
source("R/outcome_analysis_stage.R")
source("R/get_propensity.R")
abc <- estimation_stage(.data = df2$amp, missing_method = "complete", model_type = "lm",
treatment_variable = "t", matching_variable = c("a", "b"))
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
} else {
f = as.formula(paste0("as.factor(", treatment_variable,") ~",paste0(matching_variable, collapse="+")))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), #
function(x) gbm(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model = gbm(as.formula(f), data = handled_missingness,...) #
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest::randomForest(as.formula(f), data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest::randomForest(as.formula(f), data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
# estimated_propensity_model = lapply(complete(handled_missingness, "all"),
#                                    function(x) MASS::polr(f, data = x, Hess =T,...))
comp <- mice::complete(handled_missingness, "long", include = TRUE)
comp[[treatment_variable]] <- as.factor(comp[[treatment_variable]])
handled_missingness <- as.mids(comp)
comp <- mice::complete(handled_missingness, "all", include = FALSE)
estimated_propensity_model <- data.frame()
for (i in 1:length(comp)){
polly <- MASS::polr(f, data = comp[[i]],
Hess=T)
res <- as.data.frame(cbind(comp[[i]],
polly$model,
polly$lp))
res$impset <- i
estimated_propensity_model <- rbind(estimated_propensity_model,res)
}
}else if(missing_method == "complete"){
handled_missingness[[treatment_variable]] <- as.factor(handled_missingness[[treatment_variable]])
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
} else if(missing_method == "weighting"){
handled_missingness[[7]][[treatment_variable]] <- as.factor(handled_missingness[[7]][[treatment_variable]])
estimated_propensity_model = svyolr(f, design=handled_missingness)
}
},
lm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family = gaussian(link = "identity"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = gaussian(link = "identity"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly, lm)")
)
return(estimated_propensity_model)
}
source("R/propensity_estimation_stage.R")
source("R/evaluate_imputations.R")
source("R/evaluate_propensity_stage.R")
source("R/balance_data.R")
source("R/outcome_analysis_stage.R")
abc <- estimation_stage(.data = df2$amp, missing_method = "complete", model_type = "lm",
treatment_variable = "t", matching_variable = c("a", "b"))
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = df2$amp, missing_method = "complete", model_type = "lm",
treatment_variable = "t", matching_variable = c("a", "b"))
calculate_ordered_logistic_linear_predictor <- function(formula, data,
design_object) {
# Fit ordered logistic regression model
model <- svyolr(formula, design = design_object)
# Extract coefficients
coefficients <- coef(model)
# Initialise linear predictor
propensity_score <- 0  # Zero for the intercept
# Extract predictor variables from df
predictors <- all.vars(formula)[-1]  # Exclude the outcome variable
# Calculate linear predictor
for (predictor in predictors) {
propensity_score <- propensity_score + coefficients[predictor] * data[[predictor]]
}
return(propensity_score)
}
get_propensity <- function(estimated_propensity_model, model_type, treatment_variable, matching_variable,
handled_missingness, missing_method,.data,...){
if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
} else {
f = as.formula(paste0("as.factor(", treatment_variable,") ~",paste0(matching_variable, collapse="+")))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(glm(f, data = x, family=binomial(link="probit"), ...),
type = "response"))
} else { # for CC and weighting approaches alike
propensity_score = estimated_propensity_model$fitted.values
}
},
gbm = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(gbm(as.formula(f), data = x, ...),
type = "response"))
} else {
propensity_score = predict(estimated_propensity_model, type = "response")
}
},
rf = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(randomForest(as.formula(f), data = x, ...),
type = "response"))
} else{
propensity_score = predict(estimated_propensity_model, type = "response")
}
},
poly = {
if(missing_method == "mi" & model_type == "poly"){
propensity_score <- estimated_propensity_model
} else if (missing_method == "complete" & model_type == "poly"){
propensity_score = as.data.frame(cbind(handled_missingness,
#estimated_propensity_model$model, don't think this is needed
estimated_propensity_model$lp))
names(propensity_score)[names(propensity_score) == "polly$lp"] <- "lp"
} else if(missing_method == "weighting" & model_type == "poly"){
propensity_score <- calculate_ordered_logistic_linear_predictor(formula = f,
data = handled_missingness$variables,
design_object = handled_missingness)
propensity_score <- cbind(handled_missingness$variables, propensity_score)
}
},
lm = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(glm(f, data = x, family = gaussian(), ...)))
} else { # for CC and weighting approaches alike
propensity_score = predict(estimated_propensity_model)
}
}
stop("I need a valid model! (glm, gbm, rf, poly, lm)")
calculate_ordered_logistic_linear_predictor <- function(formula, data,
design_object) {
# Fit ordered logistic regression model
model <- svyolr(formula, design = design_object)
# Extract coefficients
coefficients <- coef(model)
# Initialise linear predictor
propensity_score <- 0  # Zero for the intercept
# Extract predictor variables from df
predictors <- all.vars(formula)[-1]  # Exclude the outcome variable
# Calculate linear predictor
for (predictor in predictors) {
propensity_score <- propensity_score + coefficients[predictor] * data[[predictor]]
}
return(propensity_score)
}
get_propensity <- function(estimated_propensity_model, model_type, treatment_variable, matching_variable,
handled_missingness, missing_method,.data,...){
if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
} else {
f = as.formula(paste0("as.factor(", treatment_variable,") ~",paste0(matching_variable, collapse="+")))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(glm(f, data = x, family=binomial(link="probit"), ...),
type = "response"))
} else { # for CC and weighting approaches alike
propensity_score = estimated_propensity_model$fitted.values
}
},
gbm = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(gbm(as.formula(f), data = x, ...),
type = "response"))
} else {
propensity_score = predict(estimated_propensity_model, type = "response")
}
},
rf = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(randomForest(as.formula(f), data = x, ...),
type = "response"))
} else{
propensity_score = predict(estimated_propensity_model, type = "response")
}
},
poly = {
if(missing_method == "mi" & model_type == "poly"){
propensity_score <- estimated_propensity_model
} else if (missing_method == "complete" & model_type == "poly"){
propensity_score = as.data.frame(cbind(handled_missingness,
#estimated_propensity_model$model, don't think this is needed
estimated_propensity_model$lp))
names(propensity_score)[names(propensity_score) == "polly$lp"] <- "lp"
} else if(missing_method == "weighting" & model_type == "poly"){
propensity_score <- calculate_ordered_logistic_linear_predictor(formula = f,
data = handled_missingness$variables,
design_object = handled_missingness)
propensity_score <- cbind(handled_missingness$variables, propensity_score)
}
},
lm = {
if(missing_method == "mi"){
propensity_score = lapply(complete(handled_missingness, "all"),
function(x) predict(glm(f, data = x, family = gaussian(), ...)))
} else { # for CC and weighting approaches alike
propensity_score = predict(estimated_propensity_model)
}
},
stop("I need a valid model! (glm, gbm, rf, poly, lm)")
)
return(propensity_score)
}
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = df2$amp, missing_method = "complete", model_type = "lm",
treatment_variable = "t", matching_variable = c("a", "b"))
View(abc)
