shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionBttn()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?toggleState
sim_basicrs <- function(seed=NULL){
if(!is.null(seed)){
set.seed(seed)
}
N = 200
n_groups = 20
g = rep(1:n_groups, e = N/n_groups)      # the group identifier
x = rnorm(N)                             # an observation level continuous variable
sd_g = .4     # standard deviation for the random effect
sigma = .5     # standard deviation for the observation
sd_x = .4
re0 = rnorm(n_groups, sd = sd_g)  # random effects
re  = re0[g]
rex = rnorm(n_groups, sd = sd_x)  # random effects
re_x  = rex[g]
lp = (0 + re) + (-.5 + re_x)*x
y = rnorm(N, mean = lp, sd = sigma)               # create a continuous target variable
y_bin = rbinom(N, size = 1, prob = plogis(lp))    #- create a binary target variable
data.frame(x, y, y_bin, g = factor(g))
}
df <- sim_basicrs()
df$g <- factor(df$g)
library(survey)
survey.design <- svydesign(ids=~g, prob=~1, data=df)
summary(svyglm(y~1+x,design=survey.design))
library(lavaan)
library(lavaan.survey)
initfit <- sem("y~1+x",df)
survey.fit <- lavaan.survey(lavaan.fit=initfit, survey.design=survey.design)
partable(survey.fit)$se[2]
partable(survey.fit)
summary(survey.fit)
as.data.frame(summary(survey.fit))
as.data.frame(print(summary(survey.fit)))
dd=as.data.frame(print(summary(survey.fit)))
dd
capture.output(summary(survey.fit))
as.data.frame(capture.output(summary(survey.fit)))
capture.output(summary(survey.fit))
init_output <- capture.output(summary(survey.fit))
enframe(init_output)
library(tidyverse)
enframe(init_output)
summary(survey.fit
)
summary(survey.fit)
?partable
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
shinyWidgetsGallery()
runApp()
runApp()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionBttn
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?reactiveValues
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyWidgetsGallery()
runApp()
library(tidyverse)
zp <- read_csv("zp_read_all.csv")
zp
names(zp)
install.packages("synthpop")
zp <- read_csv("zp_read_all.csv")[,-c(1:2)]
library(synthpop)
names(zp)
syn(zp)
synzp <- syn(zp)
?syn
library(tidyverse)
library(synthpop)
zp <- read_csv("zp_read_all.csv")[,-c(1:2)]
names(zp)
synzp <- syn(zp, minnumlevels = 4, seed = nchar("we all play synth"))
library(tidyverse)
library(synthpop)
zp <- read_csv("zp_read_all.csv")[,-c(1:2)]
names(zp)
synzp <- syn(zp, minnumlevels = 4, seed = nchar("we all play synth"))
# compare the synthetic and original data frames
compare(synthzp, zp, nrow = 3, ncol = 4, cols = mycols)$plot
# compare the synthetic and original data frames
compare(synzp, zp, nrow = 3, ncol = 4, cols = mycols)$plot
# compare the synthetic and original data frames
compare(synzp, zp, nrow = 3, ncol = 4, cols = 1:5)$plot
# compare the synthetic and original data frames
compare(synzp, zp, nrow = 3, ncol = 4, cols = names(zp)[1:10])$plot
compare(synzp, zp, nrow = 3, ncol = 4, cols = names(zp)[1:10])
# compare the synthetic and original data frames
compare(synzp, zp, nrow = 3, ncol = 4, cols = names(zp)[2:3])$plot
# compare the synthetic and original data frames
compare(synzp, zp, nrow = 3, ncol = 4, cols = names(zp)[2:3])
# compare the synthetic and original data frames
compare(synzp, zp, nrow = 3, ncol = 4)
synzp %>% str
synzp$syn
head(synzp$syn)
head(zp)
head(as_tibble(synzp$syn))
head(zp)
head(as_tibble(synzp$syn))
head(zp)
write_csv(synzp$syn, file="zp_synth.csv")
runApp()
runApp()
