},
eventslog = {
evaluation = estimation_model_object$missingness_treated_dataset$loggedevents
},
inspect_matrix = {
evaluation = estimation_model_object$missingness_treated_dataset$predictorMatrix
},
stop("I need a valid method! (distributional discrepancy, convergence)")
)
return(evaluation)
}
evaluate_imputations(abc, "eventslog")
evaluate_imputations <- function(estimation_model_object, evaluation_method, graph_display,...){
switch(evaluation_method,
distributional_discrepancy = {
evaluation = check_distributional_discrepancy(estimation_model_object, graph_display)
},
convergence = {
evaluation = check_convergence(estimation_model_object)
},
eventslog = {
evaluation = estimation_model_object$missingness_treated_dataset$loggedEvents
},
inspect_matrix = {
evaluation = estimation_model_object$missingness_treated_dataset$predictorMatrix
},
stop("I need a valid method! (distributional discrepancy, convergence)")
)
return(evaluation)
}
evaluate_imputations(abc, "eventslog")
abc$missingness_treated_dataset$loggedEvents
abc$missingness_treated_dataset$predictorMatrix
evaluate_imputations(abc, "distributional_discrepancy", "strip")
evaluate_imputations(abc, "convergence")
evaluate_imputations(abc, "eventslog")
evaluate_imputations(abc, "inspect_matrix")
ghi <- balance_data(counterfactual_method = "iptw", treatment_variable = "t",
matching_variable = c("a", "b"), PS_estimation_object = abc,
missing_method = "mi")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "iptw",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "mo")
mno <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "iptw",
outcome_variable = "y",
treatment_variable = "t",
matching_variable = c("a", "b"),
psmodel_obj = abc,
missing_method = "mi")
mno
source("R/propensity_estimation_stage.R")
source("R/evaluate_imputations.R")
source("R/balance_data.R")
source("R/outcome_analysis_stage.R")
data(nhanes)
# nb: model/variable choice makes no sense due to variable types
# but used as an example to add cluster/strata/weights etc
abc <- estimation_stage(.data = nhanes, missing_method = "weighting", model_type = "glm",
treatment_variable = "HI_CHOL", matching_variable = "race",
weighting_variable = "WTMEC2YR", cluster_variable = "SDMVPSU",
strata_variable = "SDMVSTRA")
create_design <- function(.data, weighting_variable = NULL,
cluster_variable = NULL, strata_variable = NULL,
...){
if (!is.null(weighting_variable) & is.null(cluster_variable) & is.null(strata_variable)) { # currently as sampling & NR have same workflow, is not controlled by NR = TRUE
data_complete = subset(.data, !is.na(.data[[weighting_variable]])) # only weighting
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
data = data_complete,
...) #
} else if(!is.null(cluster_variable) & !is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[cluster_variable]]))) # weighting and ids
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]]))) # weighting and strata
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & !is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # all 3
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
} else if(!is.null(cluster_variable) & is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, !is.na(.data[[cluster_variable]])) # ids only
design_object = svydesign(ids = data_complete[[cluster_variable]],
data = data_complete,
...)
}else if(!is.null(strata_variable) & is.null(weighting_variable) & is.null(cluster_variable)){
data_complete = subset(.data, !is.na(.data[[strata_variable]])) # strata only
design_object = svydesign(ids = ~1,
strata = data_complete[[strata_variable]],
data = data_complete,
...)
}
else if(!is.null(strata_variable) & is.null(weighting_variable) & !is.null(cluster_variable)){
data_complete = subset(.data, (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # strata only
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
}
}
create_design(nhanes, weighting_variable = "WTMEC2YR")
c <- create_design(nhanes, weighting_variable = "WTMEC2YR")
c
c <- create_design(nhanes, weighting_variable = "WTMEC2YR", strata_variable = "SDMVSTRA")
C
c
c <- create_design(nhanes, weighting_variable = "WTMEC2YR", strata_variable = "SDMVSTRA", cluster_variable = "SDMVPSU")
c <- create_design(nhanes, weighting_variable = "WTMEC2YR", cluster_variable = "SDMVPSU")
c <- create_design(nhanes,luster_variable = "SDMVPSU")
c <- create_design(nhanes, cluster_variable = "SDMVPSU")
c
c <- create_design(nhanes, cluster_variable = "SDMVPSU")
c <- create_design(nhanes, weighting_variable = "WTMEC2YR", cluster_variable = "SDMVPSU")
c <- create_design(nhanes, weighting_variable = "WTMEC2YR", strata_variable = "SDMVSTRA")
c <- create_design(nhanes, strata_variable = "SDMVSTRA")
c <- create_design(nhanes, weighting_variable = "WTMEC2YR", cluster_variable = "SDMVPSU")
create_design <- function(.data, weighting_variable = NULL,
cluster_variable = NULL, strata_variable = NULL,
...){
if (!is.null(weighting_variable) & is.null(cluster_variable) & is.null(strata_variable)) { # currently as sampling & NR have same workflow, is not controlled by NR = TRUE
data_complete = subset(.data, !is.na(.data[[weighting_variable]])) # only weighting
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
data = data_complete,
...) #
} else if(!is.null(cluster_variable) & !is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[cluster_variable]]))) # weighting and ids
design_object = svydesign(ids = ~data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]]))) # weighting and strata
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & !is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # all 3
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
} else if(!is.null(cluster_variable) & is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, !is.na(.data[[cluster_variable]])) # ids only
design_object = svydesign(ids = data_complete[[cluster_variable]],
data = data_complete,
...)
}else if(!is.null(strata_variable) & is.null(weighting_variable) & is.null(cluster_variable)){
data_complete = subset(.data, !is.na(.data[[strata_variable]])) # strata only
design_object = svydesign(ids = ~1,
strata = data_complete[[strata_variable]],
data = data_complete,
...)
}
else if(!is.null(strata_variable) & is.null(weighting_variable) & !is.null(cluster_variable)){
data_complete = subset(.data, (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # strata only
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
}
}
c <- create_design(nhanes, weighting_variable = "WTMEC2YR", cluster_variable = "SDMVPSU")
gen_X <- function(n) {
X <- matrix(rnorm(9 * n), nrow = n, ncol = 9)
X[,5] <- as.numeric(X[,5] < .5)
X
}
#~20% treated
gen_A <- function(X) {
LP_A <- - 1.2 + log(2)*X[,1] - log(1.5)*X[,2] + log(2)*X[,4] - log(2.4)*X[,5] +
log(2)*X[,7] - log(1.5)*X[,8]
P_A <- plogis(LP_A)
rbinom(nrow(X), 1, P_A)
}
# Continuous outcome
gen_Y_C <- function(A, X) {
2*A + 2*X[,1] + 2*X[,2] + 2*X[,3] + 1*X[,4] + 2*X[,5] + 1*X[,6] + rnorm(length(A), 0, 5)
}
gen_SW <- function(X) {
e <- rbinom(nrow(X), 1, .3)
1/plogis(log(1.4)*X[,2] + log(.7)*X[,4] + log(.9)*X[,6] + log(1.5)*X[,8] + log(.9)*e +
-log(.5)*e*X[,2] + log(.6)*e*X[,4])
}
n <- 2000
X <- gen_X(n)
A <- gen_A(X)
SW <- gen_SW(X)
Y_C <- gen_Y_C(A, X)
d <- data.frame(A, X, Y_C, SW)
rm(SW)
rm(A)
rm(Y_C)
rm(X)
rm(n)
df2 = mice::ampute(d,
prop = 0.15)
data_to_use <- df2$amp
create_design <- function(.data, weighting_variable = NULL,
cluster_variable = NULL, strata_variable = NULL,
...){
if (!is.null(weighting_variable) & is.null(cluster_variable) & is.null(strata_variable)) { # currently as sampling & NR have same workflow, is not controlled by NR = TRUE
data_complete = subset(.data, !is.na(.data[[weighting_variable]])) # only weighting
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
data = data_complete,
...) #
} else if(!is.null(cluster_variable) & !is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[cluster_variable]]))) # weighting and ids
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]]))) # weighting and strata
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & !is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # all 3
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
} else if(!is.null(cluster_variable) & is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, !is.na(.data[[cluster_variable]])) # ids only
design_object = svydesign(ids = data_complete[[cluster_variable]],
data = data_complete,
...)
}else if(!is.null(strata_variable) & is.null(weighting_variable) & is.null(cluster_variable)){
data_complete = subset(.data, !is.na(.data[[strata_variable]])) # strata only
design_object = svydesign(ids = ~1,
strata = data_complete[[strata_variable]],
data = data_complete,
...)
}
else if(!is.null(strata_variable) & is.null(weighting_variable) & !is.null(cluster_variable)){
data_complete = subset(.data, (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # strata only
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
}
}
create_design(data_to_use, weighting_variable = "SW")
d <- create_design(data_to_use, weighting_variable = "SW")
d
d <- create_design(data_to_use, cluster_variable = "SW")
d
data(nhanes)
# nb: model/variable choice makes no sense due to variable types
# but used as an example to add cluster/strata/weights etc
abc <- estimation_stage(.data = nhanes, missing_method = "weighting", model_type = "glm",
treatment_variable = "HI_CHOL", matching_variable = "race",
weighting_variable = "WTMEC2YR", cluster_variable = "SDMVPSU",
strata_variable = "SDMVSTRA")
create_design(nhanes, cluster_variable = "SDMVPSU")
d
gen_X <- function(n) {
X <- matrix(rnorm(9 * n), nrow = n, ncol = 9)
X[,5] <- as.numeric(X[,5] < .5)
X
}
#~20% treated
gen_A <- function(X) {
LP_A <- - 1.2 + log(2)*X[,1] - log(1.5)*X[,2] + log(2)*X[,4] - log(2.4)*X[,5] +
log(2)*X[,7] - log(1.5)*X[,8]
P_A <- plogis(LP_A)
rbinom(nrow(X), 1, P_A)
}
# Continuous outcome
gen_Y_C <- function(A, X) {
2*A + 2*X[,1] + 2*X[,2] + 2*X[,3] + 1*X[,4] + 2*X[,5] + 1*X[,6] + rnorm(length(A), 0, 5)
}
gen_SW <- function(X) {
e <- rbinom(nrow(X), 1, .3)
1/plogis(log(1.4)*X[,2] + log(.7)*X[,4] + log(.9)*X[,6] + log(1.5)*X[,8] + log(.9)*e +
-log(.5)*e*X[,2] + log(.6)*e*X[,4])
}
n <- 2000
X <- gen_X(n)
A <- gen_A(X)
SW <- gen_SW(X)
Y_C <- gen_Y_C(A, X)
d <- data.frame(A, X, Y_C, SW)
rm(SW)
rm(A)
rm(Y_C)
rm(X)
rm(n)
d <- create_design(d, cluster_variable = "SW")
d
data(nhanes)
nhanes
data(nhanes)
d <- data(nhanes)
data(nhanes)
create_design <- function(.data, weighting_variable = NULL,
cluster_variable = NULL, strata_variable = NULL,
...){
if (!is.null(weighting_variable) & is.null(cluster_variable) & is.null(strata_variable)) { # currently as sampling & NR have same workflow, is not controlled by NR = TRUE
data_complete = subset(.data, !is.na(.data[[weighting_variable]])) # only weighting
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
data = data_complete,
...) #
} else if(!is.null(cluster_variable) & !is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[cluster_variable]]))) # weighting and ids
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]]))) # weighting and strata
design_object = svydesign(ids = ~1,
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
} else if(!is.null(strata_variable) & !is.null(cluster_variable) & !is.null(weighting_variable)){
data_complete = subset(.data, (!is.na(.data[[weighting_variable]])) & (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # all 3
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
weights = data_complete[[weighting_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
} else if(!is.null(cluster_variable) & is.null(weighting_variable) & is.null(strata_variable)){
data_complete = subset(.data, !is.na(.data[[cluster_variable]])) # ids only
design_object = svydesign(ids = data_complete[[cluster_variable]],
data = data_complete,
...)
}else if(!is.null(strata_variable) & is.null(weighting_variable) & is.null(cluster_variable)){
data_complete = subset(.data, !is.na(.data[[strata_variable]])) # strata only
design_object = svydesign(ids = ~1,
strata = data_complete[[strata_variable]],
data = data_complete,
...)
}
else if(!is.null(strata_variable) & is.null(weighting_variable) & !is.null(cluster_variable)){
data_complete = subset(.data, (!is.na(.data[[strata_variable]])) & (!is.na(.data[[cluster_variable]]))) # strata only
tryCatch(
expr = {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete,
...)
},
error = function(e) {
design_object = svydesign(ids = data_complete[[cluster_variable]],
strata = data_complete[[strata_variable]],
data = data_complete, nest = TRUE,
...)
}
)
}
}
create_design(.data = nhanes, cluster_variable = "SDMVPSU")
View(nhanes)
data(nhanes2)
nhanes2
load(nhanes)
require(nhanes)
data(nhanes)
View(nhanes)
data(nhanes)
rm(nhanes)
data()
data(nhanes)
data(nhanes2)
nhanes2
nhanes
nhanes
data(scd)
View(scd)
data("nhanes")
data(api)
data(fpc)
View(fpc)
fpc
abc <- estimation_stage(.data = fpc, missing_method = "weighting", model_type = "glm",
treatment_variable = "nh", matching_variable = "x",
weighting_variable = "weight", cluster_variable = "psuid",
strata_variable = "stratid")
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = fpc, missing_method = "weighting", model_type = "glm",
treatment_variable = "nh", matching_variable = "x",
weighting_variable = "weight", cluster_variable = "psuid",
strata_variable = "stratid")
abc
abc <- estimation_stage(.data = fpc, missing_method = "weighting", model_type = "glm",
treatment_variable = "nh", matching_variable = "x",
cluster_variable = "psuid",
strata_variable = "stratid")
abc <- estimation_stage(.data = fpc, missing_method = "weighting", model_type = "glm",
treatment_variable = "nh", matching_variable = "x",
cluster_variable = "psuid")
abc <- estimation_stage(.data = fpc, missing_method = "weighting", model_type = "glm",
treatment_variable = "nh", matching_variable = "x",
strata_variable = "stratid")
View(apiclus1)
N =500
A = matrix(runif(5^2)*2-1, ncol = 5)
Xmat = MASS::mvrnorm(N, mu=rnorm(5,0,3), Sigma = t(A)%*%A)
lp = apply(Xmat, 2, scale)%*%rnorm(5,0,2)
t = rbinom(N,1,plogis(lp))
y = base::cbind(Xmat,t) %*% c(rnorm(5,0,1),2) + rnorm(N,0,1)
df <- as.data.frame(base::cbind(Xmat, t, y))
names(df) <- c(letters[1:5], "t", "y")
df$c <- as.factor(df$c)
df2 = mice::ampute(df,
prop = 0.05)
forcc <- df2$amp
forcc
str(forcc)
forcc$c <- as.factor(forcc$c)
abc <- estimation_stage(.data = df, missing_method = "complete", model_type = "poly",
treatment_variable = "c", matching_variable = c("a", "b", "d"))
View(abc)
View(abc)
