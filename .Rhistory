)
return(handled_missingness)
}
handled_missing <- handle_missingness(.data = data_to_use, missing_method = "mi")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(f, data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
mod <- estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
View(handled_missing)
final <- lapply(handled_missing, function(x) as.factor(gear))
final <- lapply(handled_missing, function(x) as.factor(x, gear))
final <- lapply(handled_missing, function(x) as.factor(x, "gear"))
final <- lapply(handled_missing, function(x) as.factor("gear"))
View(final)
rm(final)
complete(handled_missing, x)$gear
complete(handled_missing, 1)$gear
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
abc <- estimation_stage(.data = mtcars, missing_method = "mi", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(f, data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
estimate_model(handled_missing, model_type = "poly", treatment_variable = as.factor("gear"), matching_variable = c("disp", "qsec"), missing_method = "complete")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(gear~disp, data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
estimate_model(handled_missing, model_type = "poly", treatment_variable = as.factor("gear"), matching_variable = c("disp", "qsec"), missing_method = "complete")
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "complete")
f = paste0(gear,"~",paste0(disp, collapse="+"))
f = paste0("gear","~",paste0("disp", collapse="+"))
f
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "complete")
lapply(complete(handled_missing, "all"),
function(x) polr(f, data = x, Hess =T))
lapply(complete(handled_missing, "all"),
function(x) polr(as.factor(gear) ~ disp, data = x, Hess =T))
estimated_model <- lapply(complete(handled_missing, "all"),
function(x) polr(as.factor(gear) ~ disp, data = x, Hess =T))
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
f = paste0(as.factor(treatment_variable),"~",paste0(matching_variable, collapse="+"))
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(f, data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "complete")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
if(model_type == "poly"){
f = paste0(as.factor(treatment_variable),"~",paste0(matching_variable, collapse="+"))
}else{
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(f, data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "complete")
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "complete")
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
if(model_type == "poly"){
f = paste0(as.factor(treatment_variable),"~",paste0(matching_variable, collapse="+"))
}else if(model_type != "poly"){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(f, data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
if(model_type == "poly"){
f = paste0(as.factor(treatment_variable),"~",paste0(matching_variable, collapse="+"))
}else{
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(f, data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
if(model_type == "poly"){
f = paste0(as.factor(treatment_variable),"~",paste0(matching_variable, collapse="+"))
}else{
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
}
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(paste0(as.factor(treatment_variable),"~",paste0(matching_variable, collapse="+")), data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
estimate_model(handled_missing, model_type = "poly", treatment_variable = "gear", matching_variable = c("disp", "qsec"), missing_method = "mi")
estimate_model <- function(handled_missingness, model_type = NULL, treatment_variable, matching_variable,
missing_method,...){
f = paste0(treatment_variable,"~",paste0(matching_variable, collapse="+"))
switch(model_type,
glm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) glm(f, data = x, family=binomial(link="probit"), ...))
} else if(missing_method == "complete"){
estimated_propensity_model = glm(f, data = handled_missingness,
family = binomial(link="probit"),...)
} else if(missing_method == "weighting"){
estimated_propensity_model = svyglm(f, design = handled_missingness)
}
},
gbm = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to lightgbm for comp speed
function(x) gbm(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- gbm(f, data = handled_missingness,...) # switch to lightgbm for comp speed
}
},
rf = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"), # switch to ranger for comp speed
function(x) randomForest(f, data = x, ...))
}
if(missing_method == "complete"){
estimated_propensity_model <- randomForest(f, data = handled_missingness,...) # switch to ranger for comp speed
}
},
poly = {
if(missing_method == "mi"){
estimated_propensity_model = lapply(complete(handled_missingness, "all"),
function(x) polr(f, data = x, Hess =T,...))
} else if(missing_method == "complete"){
estimated_propensity_model = MASS::polr(f, data = handled_missingness,
Hess = T, ...)
}
},
stop("I need a valid model! (glm, gbm, rforest, poly)")
)
return(estimated_propensity_model)
}
#### NBP testing ####
# random data - ignore
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
abc <- estimation_stage(.data = mtcars, missing_method = "complete", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
abc <- estimation_stage(.data = mtcars, missing_method = "complete", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
jkl <- outcome_analysis_stage(balanced_data = ghi, counterfactual_method = "nbp",
outcome_variable = "mpg", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"),
psmodel_obj = abc, missing_method = "complete")
View(jkl)
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
source("R/evaluate_imputations.R")
source("R/balance_data.R")
#### NBP testing ####
# random data - ignore
data(mtcars)
mtcars$gear <- as.factor(mtcars$gear)
abc <- estimation_stage(.data = mtcars, missing_method = "complete", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
source("R/propensity_estimation_stage.R")
abc <- estimation_stage(.data = mtcars, missing_method = "complete", model_type = "poly",
treatment_variable = "gear", matching_variable = c("qsec", "hp", "disp"))
ghi <- balance_data(counterfactual_method = "nbp", treatment_variable = "gear",
matching_variable = c("qsec", "hp", "disp"), PS_estimation_object = abc,
missing_method = "complete")
